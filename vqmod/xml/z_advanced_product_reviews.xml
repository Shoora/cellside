<modification>

	<id>Advanced Product Reviews</id>
	<version>1.1</version>
	<vqmver>2.3.0</vqmver>
	<author>Adikon</author>

	<file name="admin/controller/setting/setting.php">
		<operation>	
			<search position="before"><![CDATA[$this->data['tab_general'] = $this->language->get('tab_general');]]></search>
			<add><![CDATA[
			$this->data['text_product_reviews'] = $this->language->get('text_product_reviews');
			$this->data['text_enabled'] = $this->language->get('text_enabled');
			$this->data['text_disabled'] = $this->language->get('text_disabled');
			$this->data['entry_product_reviews_status'] = $this->language->get('entry_product_reviews_status');
			$this->data['entry_product_reviews_notify_status'] = $this->language->get('entry_product_reviews_notify_status');
			$this->data['entry_product_reviews_notify_email'] = $this->language->get('entry_product_reviews_notify_email');
			$this->data['entry_product_reviews_notification'] = $this->language->get('entry_product_reviews_notification');
			$this->data['entry_product_reviews_css'] = $this->language->get('entry_product_reviews_css');
			$this->data['entry_product_reviews_rating_guest'] = $this->language->get('entry_product_reviews_rating_guest');
			$this->data['entry_product_reviews_pros_status'] = $this->language->get('entry_product_reviews_pros_status');
			$this->data['entry_product_reviews_cons_status'] = $this->language->get('entry_product_reviews_cons_status');
			$this->data['entry_product_reviews_report_abuse_status'] = $this->language->get('entry_product_reviews_report_abuse_status');
			$this->data['entry_product_reviews_helpfulness_status'] = $this->language->get('entry_product_reviews_helpfulness_status');
			$this->data['entry_product_reviews_total_rating_status'] = $this->language->get('entry_product_reviews_total_rating_status');
			$this->data['entry_product_reviews_helpfulness_guest'] = $this->language->get('entry_product_reviews_helpfulness_guest');
			$this->data['entry_product_reviews_report_abuse_guest'] = $this->language->get('entry_product_reviews_report_abuse_guest');
			$this->data['entry_product_reviews_autoapprove'] = $this->language->get('entry_product_reviews_autoapprove');
			$this->data['entry_product_reviews_autoapprove_rating'] = $this->language->get('entry_product_reviews_autoapprove_rating');
			$this->data['entry_product_reviews_appearance_type'] = $this->language->get('entry_product_reviews_appearance_type');
			$this->data['entry_product_reviews_appearance_customer_rating'] = $this->language->get('entry_product_reviews_appearance_customer_rating');
			$this->data['entry_product_reviews_sort_status'] = $this->language->get('entry_product_reviews_sort_status');
			$this->data['entry_product_reviews_image_status'] = $this->language->get('entry_product_reviews_image_status');
			$this->data['entry_product_reviews_image_thumb'] = $this->language->get('entry_product_reviews_image_thumb');
			$this->data['entry_product_reviews_image_popup'] = $this->language->get('entry_product_reviews_image_popup');
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[if (isset($this->request->post['config_name'])) {]]></search>
			<add><![CDATA[
			if (isset($this->request->post['config_product_reviews_status'])) {
				$this->data['config_product_reviews_status'] = $this->request->post['config_product_reviews_status']; 
			} else {
				$this->data['config_product_reviews_status'] = $this->config->get('config_product_reviews_status');
			}

			if (isset($this->request->post['config_product_reviews_notify_status'])) {
				$this->data['config_product_reviews_notify_status'] = $this->request->post['config_product_reviews_notify_status']; 
			} else {
				$this->data['config_product_reviews_notify_status'] = $this->config->get('config_product_reviews_notify_status');
			}

			if (isset($this->request->post['config_product_reviews_notify_email'])) {
				$this->data['config_product_reviews_notify_email'] = $this->request->post['config_product_reviews_notify_email']; 
			} elseif ($this->config->get('config_product_reviews_notify_email')) {
				$this->data['config_product_reviews_notify_email'] = $this->config->get('config_product_reviews_notify_email');
			} else {
				$this->data['config_product_reviews_notify_email'] = $this->config->get('config_email');
			}

			if (isset($this->request->post['config_product_reviews_notification'])) {
				$this->data['config_product_reviews_notification'] = $this->request->post['config_product_reviews_notification']; 
			} else {
				$this->data['config_product_reviews_notification'] = $this->config->get('config_product_reviews_notification');
			}

			if (isset($this->request->post['config_product_reviews_form_css'])) {
				$this->data['config_product_reviews_form_css'] = $this->request->post['config_product_reviews_form_css']; 
			} elseif ($this->config->get('config_product_reviews_form_css')) {
				$this->data['config_product_reviews_form_css'] = $this->config->get('config_product_reviews_form_css');
			} else {
				$this->data['config_product_reviews_form_css'] = 'table.product_rating { display: table; margin: 0px; padding: 0px; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.product_rating tr { margin-top: 4px; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.product_rating tr td:first-child { width: 100px; white-space: nowrap; padding-right: 15px; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.pros_cons { display: table; width: 100%; margin: 10px 0px 0px 0px; padding: 0px; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.pros_cons tr td { vertical-align: top; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.pros_cons tr td.pros { font-size: 13px; color: #6e9b26; font-weight: 400; text-transform: uppercase; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.pros_cons tr td.cons { font-size: 13px; color: #e71226; font-weight: 400; text-transform: uppercase; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.pros_cons tr td input { width: 70%; display: block; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.pros_cons tr td input+input { margin-top: 7px; }';
			}

			if (isset($this->request->post['config_product_reviews_list_css'])) {
				$this->data['config_product_reviews_list_css'] = $this->request->post['config_product_reviews_list_css']; 
			} elseif ($this->config->get('config_product_reviews_list_css')) {
				$this->data['config_product_reviews_list_css'] = $this->config->get('config_product_reviews_list_css');
			} else {
				$this->data['config_product_reviews_list_css'] = '.product_feature { margin-top: 17px; margin-bottom: 20px; width: 50%; vertical-align: top; display: inline-block; }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature img { vertical-align: middle; margin-right: 15px;  }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature div { display: block; }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature div+div { margin-top: 20px; }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature div b.pros { font-size: 13px; color: #6e9b26; font-weight: 400; text-transform: uppercase; display:  inline-block; }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature div b.cons { font-size: 13px; color: #e71226; font-weight: 400; text-transform: uppercase; display:  inline-block; }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature div ul { list-style: none; padding: 0px; margin: 7px 0px 0px 40px; }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature div ul li { padding-top: 3px; }';
			}

			if (isset($this->request->post['config_product_reviews_rating_css'])) {
				$this->data['config_product_reviews_rating_css'] = $this->request->post['config_product_reviews_rating_css']; 
			} elseif ($this->config->get('config_product_reviews_rating_css')) {
				$this->data['config_product_reviews_rating_css'] = $this->config->get('config_product_reviews_rating_css');
			} else {
				$this->data['config_product_reviews_rating_css'] = '.product_rating_list { margin-top: 17px; width: 35%; float: right; padding: 10px; background: #f1f5f8; }' . "\n";
				$this->data['config_product_reviews_rating_css'] .= '.product_rating_list ul { list-style: none; padding: 0px; margin: 0px; }' . "\n";
				$this->data['config_product_reviews_rating_css'] .= '.product_rating_list ul li { padding-top: 3px; clear: both; }' . "\n";
				$this->data['config_product_reviews_rating_css'] .= '.product_rating_list ul li img { float: right; }';
			}

			if (isset($this->request->post['config_product_reviews_helpfulness_css'])) {
				$this->data['config_product_reviews_helpfulness_css'] = $this->request->post['config_product_reviews_helpfulness_css']; 
			} elseif ($this->config->get('config_product_reviews_helpfulness_css')) {
				$this->data['config_product_reviews_helpfulness_css'] = $this->config->get('config_product_reviews_helpfulness_css');
			} else {
				$this->data['config_product_reviews_helpfulness_css'] = '.product_review_helpfulness { border: 1px solid #ddd; position: relative; padding: 7px; margin-top: 15px; margin-left: 40px; font-size: 12px; color: #777;  line-height: 1.6; clear: both; }' . "\n";
				$this->data['config_product_reviews_helpfulness_css'] .= '.product_review_helpfulness button { margin: 0px; padding: 0px 4px; font-size: 12px; display: inline-block; height: 1.5em; margin: 0 .3em; vertical-align: middle; border: 0; line-height: 1.5; text-transform: uppercase; color: #fff; }' . "\n";
				$this->data['config_product_reviews_helpfulness_css'] .= '.product_review_helpfulness button.vote_yes { background: #6e9b26; }' . "\n";
				$this->data['config_product_reviews_helpfulness_css'] .= '.product_review_helpfulness button.vote_no { background: #e71226; }' . "\n";
				$this->data['config_product_reviews_helpfulness_css'] .= '.product_review_helpfulness a { position: absolute; top: 7px; right: 7px; }';
			}

			if (isset($this->request->post['config_product_reviews_sort_css'])) {
				$this->data['config_product_reviews_sort_css'] = $this->request->post['config_product_reviews_sort_css']; 
			} elseif ($this->config->get('config_product_reviews_sort_css')) {
				$this->data['config_product_reviews_sort_css'] = $this->config->get('config_product_reviews_sort_css');
			} else {
				$this->data['config_product_reviews_sort_css'] = '.product_review_sort { border: none; margin-bottom: 10px; font-size: 12px; color: #333;  line-height: 1.6; text-align: right; }' . "\n";
				$this->data['config_product_reviews_sort_css'] .= '.product_review_sort b { font-weight: 700; }';
			}

			if (isset($this->request->post['config_product_reviews_total_rating_css'])) {
				$this->data['config_product_reviews_total_rating_css'] = $this->request->post['config_product_reviews_total_rating_css']; 
			} elseif ($this->config->get('config_product_reviews_total_rating_css')) {
				$this->data['config_product_reviews_total_rating_css'] = $this->config->get('config_product_reviews_total_rating_css');
			} else {
				$this->data['config_product_reviews_total_rating_css'] = '.product_review_total_rating { background: #dbe8f1; font-weight: 700; margin-top: 5px; padding: 3px; }' . "\n";
				$this->data['config_product_reviews_total_rating_css'] .= '.product_review_total_rating img { border: none; }';
			}

			if (isset($this->request->post['config_product_reviews_image_css'])) {
				$this->data['config_product_reviews_image_css'] = $this->request->post['config_product_reviews_image_css']; 
			} elseif ($this->config->get('config_product_reviews_image_css')) {
				$this->data['config_product_reviews_image_css'] = $this->config->get('config_product_reviews_image_css');
			} else {
				$this->data['config_product_reviews_image_css'] = '.product_review_image_popup { background: #fff; }' . "\n";
				$this->data['config_product_reviews_image_css'] .= '.product_review_image_popup img { padding: 3px; border: 1px solid #E7E7E7; margin-right: 4px; }';
			}

			if (isset($this->request->post['config_product_reviews_box_css'])) {
				$this->data['config_product_reviews_box_css'] = $this->request->post['config_product_reviews_box_css']; 
			} elseif ($this->config->get('config_product_reviews_box_css')) {
				$this->data['config_product_reviews_box_css'] = $this->config->get('config_product_reviews_box_css');
			} else {
				$this->data['config_product_reviews_box_css'] = '.review_box > div:last-child { margin-bottom: 0px; }' . "\n";
				$this->data['config_product_reviews_box_css'] .= '.review_box .review_text { border-left: 5px solid #e1e1e1; padding-left: 5px; margin-bottom: 4px; font-style: italic; }' . "\n";
				$this->data['config_product_reviews_box_css'] .= '.review_box .review_author { font-size: 99%; color: #222; margin: 2px 0px 3px 0px; }' . "\n";
				$this->data['config_product_reviews_box_css'] .= '.review_box .review_date { font-size: 11px; color: #555; white-space: nowrap; }' . "\n";
				$this->data['config_product_reviews_box_css'] .= '.review_box .review_rating { display: block; }';
			}

			if (isset($this->request->post['config_product_reviews_page_css'])) {
				$this->data['config_product_reviews_page_css'] = $this->request->post['config_product_reviews_page_css']; 
			} elseif ($this->config->get('config_product_reviews_page_css')) {
				$this->data['config_product_reviews_page_css'] = $this->config->get('config_product_reviews_page_css');
			} else {
				$this->data['config_product_reviews_page_css'] = '.all_review .all_review_right { float: right; width: 25%; padding: 10px; background: #f1f5f8; margin-left: 15px; min-height: 50px; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_right ul { margin: 0px; padding: 0px; list-style: none; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_right ul li { white-space: nowrap; padding-top: 3px; clear: both; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_right ul li img { float: right; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_left { background: #fff; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_left > .author { margin-bottom: 3px; font-weight: bold; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_left > .author .date { font-size: 11px; font-weight: normal; color: #555; white-space: nowrap; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_left > .description { line-height: 15px; margin-bottom: 5px; color: #4D4D4D; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_left a { color: #38B0E3; font-weight: bold; text-decoration: none; }';
			}

			if (isset($this->request->post['config_product_reviews_rating_guest'])) {
				$this->data['config_product_reviews_rating_guest'] = $this->request->post['config_product_reviews_rating_guest']; 
			} else {
				$this->data['config_product_reviews_rating_guest'] = $this->config->get('config_product_reviews_rating_guest');
			}

			if (isset($this->request->post['config_product_reviews_pros_status'])) {
				$this->data['config_product_reviews_pros_status'] = $this->request->post['config_product_reviews_pros_status']; 
			} else {
				$this->data['config_product_reviews_pros_status'] = $this->config->get('config_product_reviews_pros_status');
			}

			if (isset($this->request->post['config_product_reviews_cons_status'])) {
				$this->data['config_product_reviews_cons_status'] = $this->request->post['config_product_reviews_cons_status']; 
			} else {
				$this->data['config_product_reviews_cons_status'] = $this->config->get('config_product_reviews_cons_status');
			}

			if (isset($this->request->post['config_product_reviews_report_abuse_status'])) {
				$this->data['config_product_reviews_report_abuse_status'] = $this->request->post['config_product_reviews_report_abuse_status']; 
			} else {
				$this->data['config_product_reviews_report_abuse_status'] = $this->config->get('config_product_reviews_report_abuse_status');
			}

			if (isset($this->request->post['config_product_reviews_helpfulness_status'])) {
				$this->data['config_product_reviews_helpfulness_status'] = $this->request->post['config_product_reviews_helpfulness_status']; 
			} else {
				$this->data['config_product_reviews_helpfulness_status'] = $this->config->get('config_product_reviews_helpfulness_status');
			}

			if (isset($this->request->post['config_product_reviews_total_rating_status'])) {
				$this->data['config_product_reviews_total_rating_status'] = $this->request->post['config_product_reviews_total_rating_status']; 
			} else {
				$this->data['config_product_reviews_total_rating_status'] = $this->config->get('config_product_reviews_total_rating_status');
			}

			if (isset($this->request->post['config_product_reviews_helpfulness_guest'])) {
				$this->data['config_product_reviews_helpfulness_guest'] = $this->request->post['config_product_reviews_helpfulness_guest']; 
			} else {
				$this->data['config_product_reviews_helpfulness_guest'] = $this->config->get('config_product_reviews_helpfulness_guest');
			}

			if (isset($this->request->post['config_product_reviews_report_abuse_guest'])) {
				$this->data['config_product_reviews_report_abuse_guest'] = $this->request->post['config_product_reviews_report_abuse_guest']; 
			} else {
				$this->data['config_product_reviews_report_abuse_guest'] = $this->config->get('config_product_reviews_report_abuse_guest');
			}

			if (isset($this->request->post['config_product_reviews_autoapprove'])) {
				$this->data['config_product_reviews_autoapprove'] = $this->request->post['config_product_reviews_autoapprove']; 
			} else {
				$this->data['config_product_reviews_autoapprove'] = $this->config->get('config_product_reviews_autoapprove');
			}

			if (isset($this->request->post['config_product_reviews_autoapprove_rating'])) {
				$this->data['config_product_reviews_autoapprove_rating'] = $this->request->post['config_product_reviews_autoapprove_rating']; 
			} else {
				$this->data['config_product_reviews_autoapprove_rating'] = $this->config->get('config_product_reviews_autoapprove_rating');
			}

			$this->data['appearance'] = array('small', 'medium' , 'big');

			if (isset($this->request->post['config_product_reviews_appearance_type'])) {
				$this->data['config_product_reviews_appearance_type'] = $this->request->post['config_product_reviews_appearance_type']; 
			} else {
				$this->data['config_product_reviews_appearance_type'] = $this->config->get('config_product_reviews_appearance_type');
			}

			$this->data['appearance_customer'] = array();

			$stars = glob(DIR_IMAGE . 'product_review/stars-*');

			$base = defined('HTTPS_CATALOG') ? HTTPS_CATALOG : HTTP_CATALOG;

			foreach ($stars as $star) {
				preg_match("/\/stars-(.*)-(\d+).png$/i", $star, $name);

				if (isset($name[1]) && $name[sizeof($name) - 1] == '5') {
					$this->data['appearance_customer'][] = array($base . 'image/product_review' . $name[0], $name[sizeof($name) - 2]);
				}
			}

			if (isset($this->request->post['config_product_reviews_appearance_customer_rating'])) {
				$this->data['config_product_reviews_appearance_customer_rating'] = $this->request->post['config_product_reviews_appearance_customer_rating']; 
			} else {
				$this->data['config_product_reviews_appearance_customer_rating'] = $this->config->get('config_product_reviews_appearance_customer_rating');
			}

			if (isset($this->request->post['config_product_reviews_sort_status'])) {
				$this->data['config_product_reviews_sort_status'] = $this->request->post['config_product_reviews_sort_status']; 
			} else {
				$this->data['config_product_reviews_sort_status'] = $this->config->get('config_product_reviews_sort_status');
			}

			if (isset($this->request->post['config_product_reviews_image_status'])) {
				$this->data['config_product_reviews_image_status'] = $this->request->post['config_product_reviews_image_status']; 
			} else {
				$this->data['config_product_reviews_image_status'] = $this->config->get('config_product_reviews_image_status');
			}

			if (isset($this->request->post['config_product_reviews_image_thumb_width'])) {
				$this->data['config_product_reviews_image_thumb_width'] = $this->request->post['config_product_reviews_image_thumb_width']; 
			} else {
				$this->data['config_product_reviews_image_thumb_width'] = $this->config->get('config_product_reviews_image_thumb_width');
			}

			if (isset($this->request->post['config_product_reviews_image_thumb_height'])) {
				$this->data['config_product_reviews_image_thumb_height'] = $this->request->post['config_product_reviews_image_thumb_height']; 
			} else {
				$this->data['config_product_reviews_image_thumb_height'] = $this->config->get('config_product_reviews_image_thumb_height');
			}

			if (isset($this->request->post['config_product_reviews_image_popup_width'])) {
				$this->data['config_product_reviews_image_popup_width'] = $this->request->post['config_product_reviews_image_popup_width']; 
			} else {
				$this->data['config_product_reviews_image_popup_width'] = $this->config->get('config_product_reviews_image_popup_width');
			}

			if (isset($this->request->post['config_product_reviews_image_popup_height'])) {
				$this->data['config_product_reviews_image_popup_height'] = $this->request->post['config_product_reviews_image_popup_height']; 
			} else {
				$this->data['config_product_reviews_image_popup_height'] = $this->config->get('config_product_reviews_image_popup_height');
			}

			$this->data['product_ratings'] = range(1, 5);
			]]></add>
		</operation>
	</file>

	<file name="admin/controller/setting/store.php">
		<operation>	
			<search position="before"><![CDATA[$this->data['tab_general'] = $this->language->get('tab_general');]]></search>
			<add><![CDATA[
			$this->data['text_product_reviews'] = $this->language->get('text_product_reviews');
			$this->data['text_enabled'] = $this->language->get('text_enabled');
			$this->data['text_disabled'] = $this->language->get('text_disabled');
			$this->data['entry_product_reviews_status'] = $this->language->get('entry_product_reviews_status');
			$this->data['entry_product_reviews_notify_status'] = $this->language->get('entry_product_reviews_notify_status');
			$this->data['entry_product_reviews_notify_email'] = $this->language->get('entry_product_reviews_notify_email');
			$this->data['entry_product_reviews_notification'] = $this->language->get('entry_product_reviews_notification');
			$this->data['entry_product_reviews_css'] = $this->language->get('entry_product_reviews_css');
			$this->data['entry_product_reviews_rating_guest'] = $this->language->get('entry_product_reviews_rating_guest');
			$this->data['entry_product_reviews_pros_status'] = $this->language->get('entry_product_reviews_pros_status');
			$this->data['entry_product_reviews_cons_status'] = $this->language->get('entry_product_reviews_cons_status');
			$this->data['entry_product_reviews_report_abuse_status'] = $this->language->get('entry_product_reviews_report_abuse_status');
			$this->data['entry_product_reviews_helpfulness_status'] = $this->language->get('entry_product_reviews_helpfulness_status');
			$this->data['entry_product_reviews_total_rating_status'] = $this->language->get('entry_product_reviews_total_rating_status');
			$this->data['entry_product_reviews_helpfulness_guest'] = $this->language->get('entry_product_reviews_helpfulness_guest');
			$this->data['entry_product_reviews_report_abuse_guest'] = $this->language->get('entry_product_reviews_report_abuse_guest');
			$this->data['entry_product_reviews_autoapprove'] = $this->language->get('entry_product_reviews_autoapprove');
			$this->data['entry_product_reviews_autoapprove_rating'] = $this->language->get('entry_product_reviews_autoapprove_rating');
			$this->data['entry_product_reviews_appearance_type'] = $this->language->get('entry_product_reviews_appearance_type');
			$this->data['entry_product_reviews_appearance_customer_rating'] = $this->language->get('entry_product_reviews_appearance_customer_rating');
			$this->data['entry_product_reviews_sort_status'] = $this->language->get('entry_product_reviews_sort_status');
			$this->data['entry_product_reviews_image_status'] = $this->language->get('entry_product_reviews_image_status');
			$this->data['entry_product_reviews_image_thumb'] = $this->language->get('entry_product_reviews_image_thumb');
			$this->data['entry_product_reviews_image_popup'] = $this->language->get('entry_product_reviews_image_popup');
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[if (isset($this->request->post['config_name'])) {]]></search>
			<add><![CDATA[
			if (isset($this->request->post['config_product_reviews_status'])) {
				$this->data['config_product_reviews_status'] = $this->request->post['config_product_reviews_status']; 
			} elseif (isset($store_info['config_product_reviews_status'])) {
				$this->data['config_product_reviews_status'] = $store_info['config_product_reviews_status'];
			} else {
				$this->data['config_product_reviews_status'] = '';
			}

			if (isset($this->request->post['config_product_reviews_notify_status'])) {
				$this->data['config_product_reviews_notify_status'] = $this->request->post['config_product_reviews_notify_status']; 
			} elseif (isset($store_info['config_product_reviews_notify_status'])) {
				$this->data['config_product_reviews_notify_status'] = $store_info['config_product_reviews_notify_status'];			
			} else {
				$this->data['config_product_reviews_notify_status'] = '';
			}

			if (isset($this->request->post['config_product_reviews_notify_email'])) {
				$this->data['config_product_reviews_notify_email'] = $this->request->post['config_product_reviews_notify_email']; 
			} elseif (isset($store_info['config_product_reviews_notify_email'])) {
				$this->data['config_product_reviews_notify_email'] = $store_info['config_product_reviews_notify_email'];
			} else {
				$this->data['config_product_reviews_notify_email'] = $this->config->get('config_email');
			}

			if (isset($this->request->post['config_product_reviews_notification'])) {
				$this->data['config_product_reviews_notification'] = $this->request->post['config_product_reviews_notification']; 
			} elseif (isset($store_info['config_product_reviews_notification'])) {
				$this->data['config_product_reviews_notification'] = $store_info['config_product_reviews_notification'];
			} else {
				$this->data['config_product_reviews_notification'] = '';
			}

			if (isset($this->request->post['config_product_reviews_form_css'])) {
				$this->data['config_product_reviews_form_css'] = $this->request->post['config_product_reviews_form_css']; 
			} elseif (isset($store_info['config_product_reviews_form_css'])) {
				$this->data['config_product_reviews_form_css'] = $store_info['config_product_reviews_form_css'];
			} else {
				$this->data['config_product_reviews_form_css'] = 'table.product_rating { display: table; margin: 0px; padding: 0px; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.product_rating tr { margin-top: 4px; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.product_rating tr td:first-child { width: 100px; white-space: nowrap; padding-right: 15px; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.pros_cons { display: table; width: 100%; margin: 10px 0px 0px 0px; padding: 0px; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.pros_cons tr td { vertical-align: top; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.pros_cons tr td.pros { font-size: 13px; color: #6e9b26; font-weight: 400; text-transform: uppercase; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.pros_cons tr td.cons { font-size: 13px; color: #e71226; font-weight: 400; text-transform: uppercase; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.pros_cons tr td input { width: 70%; display: block; }' . "\n";
				$this->data['config_product_reviews_form_css'] .= 'table.pros_cons tr td input+input { margin-top: 7px; }';
			}

			if (isset($this->request->post['config_product_reviews_list_css'])) {
				$this->data['config_product_reviews_list_css'] = $this->request->post['config_product_reviews_list_css']; 
			} elseif (isset($store_info['config_product_reviews_list_css'])) {
				$this->data['config_product_reviews_list_css'] = $store_info['config_product_reviews_list_css'];
			} else {
				$this->data['config_product_reviews_list_css'] = '.product_feature { margin-top: 17px; margin-bottom: 20px; width: 50%; vertical-align: top; display: inline-block; }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature img { vertical-align: middle; margin-right: 15px;  }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature div { display: block; }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature div+div { margin-top: 20px; }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature div b.pros { font-size: 13px; color: #6e9b26; font-weight: 400; text-transform: uppercase; display:  inline-block; }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature div b.cons { font-size: 13px; color: #e71226; font-weight: 400; text-transform: uppercase; display:  inline-block; }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature div ul { list-style: none; padding: 0px; margin: 7px 0px 0px 40px; }' . "\n";
				$this->data['config_product_reviews_list_css'] .= '.product_feature div ul li { padding-top: 3px; }';
			}

			if (isset($this->request->post['config_product_reviews_rating_css'])) {
				$this->data['config_product_reviews_rating_css'] = $this->request->post['config_product_reviews_rating_css']; 
			} elseif (isset($store_info['config_product_reviews_rating_css'])) {
				$this->data['config_product_reviews_rating_css'] = $store_info['config_product_reviews_rating_css'];
			} else {
				$this->data['config_product_reviews_rating_css'] = '.product_rating_list { margin-top: 17px; width: 35%; float: right; padding: 10px; background: #f1f5f8; }' . "\n";
				$this->data['config_product_reviews_rating_css'] .= '.product_rating_list ul { list-style: none; padding: 0px; margin: 0px; }' . "\n";
				$this->data['config_product_reviews_rating_css'] .= '.product_rating_list ul li { padding-top: 3px; clear: both; }' . "\n";
				$this->data['config_product_reviews_rating_css'] .= '.product_rating_list ul li img { float: right; }';
			}

			if (isset($this->request->post['config_product_reviews_helpfulness_css'])) {
				$this->data['config_product_reviews_helpfulness_css'] = $this->request->post['config_product_reviews_helpfulness_css']; 
			} elseif (isset($store_info['config_product_reviews_helpfulness_css'])) {
				$this->data['config_product_reviews_helpfulness_css'] = $store_info['config_product_reviews_helpfulness_css'];
			} else {
				$this->data['config_product_reviews_helpfulness_css'] = '.product_review_helpfulness { border: 1px solid #ddd; position: relative; padding: 7px; margin-top: 15px; margin-left: 40px; font-size: 12px; color: #777;  line-height: 1.6; clear: both; }' . "\n";
				$this->data['config_product_reviews_helpfulness_css'] .= '.product_review_helpfulness button { margin: 0px; padding: 0px 4px; font-size: 12px; display: inline-block; height: 1.5em; margin: 0 .3em; vertical-align: middle; border: 0; line-height: 1.5; text-transform: uppercase; color: #fff; }' . "\n";
				$this->data['config_product_reviews_helpfulness_css'] .= '.product_review_helpfulness button.vote_yes { background: #6e9b26; }' . "\n";
				$this->data['config_product_reviews_helpfulness_css'] .= '.product_review_helpfulness button.vote_no { background: #e71226; }' . "\n";
				$this->data['config_product_reviews_helpfulness_css'] .= '.product_review_helpfulness a { position: absolute; top: 7px; right: 7px; }';
			}

			if (isset($this->request->post['config_product_reviews_sort_css'])) {
				$this->data['config_product_reviews_sort_css'] = $this->request->post['config_product_reviews_sort_css']; 
			} elseif (isset($store_info['config_product_reviews_sort_css'])) {
				$this->data['config_product_reviews_sort_css'] = $store_info['config_product_reviews_sort_css'];
			} else {
				$this->data['config_product_reviews_sort_css'] = '.product_review_sort { border: none; margin-bottom: 10px; font-size: 12px; color: #333;  line-height: 1.6; text-align: right; }' . "\n";
				$this->data['config_product_reviews_sort_css'] .= '.product_review_sort b { font-weight: 700; }';
			}

			if (isset($this->request->post['config_product_reviews_total_rating_css'])) {
				$this->data['config_product_reviews_total_rating_css'] = $this->request->post['config_product_reviews_total_rating_css']; 
			} elseif (isset($store_info['config_product_reviews_total_rating_css'])) {
				$this->data['config_product_reviews_total_rating_css'] = $store_info['config_product_reviews_total_rating_css'];
			} else {
				$this->data['config_product_reviews_total_rating_css'] = '.product_review_total_rating { background: #dbe8f1; font-weight: 700; margin-top: 5px; padding: 3px; }' . "\n";
				$this->data['config_product_reviews_total_rating_css'] .= '.product_review_total_rating img { border: none; }';
			}

			if (isset($this->request->post['config_product_reviews_image_css'])) {
				$this->data['config_product_reviews_image_css'] = $this->request->post['config_product_reviews_image_css']; 
			} elseif (isset($store_info['config_product_reviews_image_css'])) {
				$this->data['config_product_reviews_image_css'] = $store_info['config_product_reviews_image_css'];
			} else {
				$this->data['config_product_reviews_image_css'] = '.product_review_image_popup { background: #fff; }' . "\n";
				$this->data['config_product_reviews_image_css'] .= '.product_review_image_popup img { padding: 3px; border: 1px solid #E7E7E7; margin-right: 4px; }';
			}

			if (isset($this->request->post['config_product_reviews_box_css'])) {
				$this->data['config_product_reviews_box_css'] = $this->request->post['config_product_reviews_box_css']; 
			} elseif (isset($store_info['config_product_reviews_box_css'])) {
				$this->data['config_product_reviews_box_css'] = $store_info['config_product_reviews_box_css'];
			} else {
				$this->data['config_product_reviews_box_css'] = '.review_box > div:last-child { margin-bottom: 0px; }' . "\n";
				$this->data['config_product_reviews_box_css'] .= '.review_box .review_text { border-left: 5px solid #e1e1e1; padding-left: 5px; margin-bottom: 4px; font-style: italic; }' . "\n";
				$this->data['config_product_reviews_box_css'] .= '.review_box .review_author { font-size: 99%; color: #222; margin: 2px 0px 3px 0px; }' . "\n";
				$this->data['config_product_reviews_box_css'] .= '.review_box .review_date { font-size: 11px; color: #555; white-space: nowrap; }' . "\n";
				$this->data['config_product_reviews_box_css'] .= '.review_box .review_rating { display: block; }';
			}

			if (isset($this->request->post['config_product_reviews_page_css'])) {
				$this->data['config_product_reviews_page_css'] = $this->request->post['config_product_reviews_page_css']; 
			} elseif (isset($store_info['config_product_reviews_page_css'])) {
				$this->data['config_product_reviews_page_css'] = $store_info['config_product_reviews_page_css'];
			} else {
				$this->data['config_product_reviews_page_css'] = '.all_review .all_review_right { float: right; width: 25%; padding: 10px; background: #f1f5f8; margin-left: 15px; min-height: 50px; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_right ul { margin: 0px; padding: 0px; list-style: none; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_right ul li { white-space: nowrap; padding-top: 3px; clear: both; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_right ul li img { float: right; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_left { background: #fff; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_left > .author { margin-bottom: 3px; font-weight: bold; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_left > .author .date { font-size: 11px; font-weight: normal; color: #555; white-space: nowrap; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_left > .description { line-height: 15px; margin-bottom: 5px; color: #4D4D4D; }' . "\n";
				$this->data['config_product_reviews_page_css'] .= '.all_review .all_review_left a { color: #38B0E3; font-weight: bold; text-decoration: none; }';
			}


			if (isset($this->request->post['config_product_reviews_rating_guest'])) {
				$this->data['config_product_reviews_rating_guest'] = $this->request->post['config_product_reviews_rating_guest'];
			} elseif (isset($store_info['config_product_reviews_rating_guest'])) {
				$this->data['config_product_reviews_rating_guest'] = $store_info['config_product_reviews_rating_guest'];
			} else {
				$this->data['config_product_reviews_rating_guest'] = $this->config->get('config_product_reviews_rating_guest');
			}

			if (isset($this->request->post['config_product_reviews_pros_status'])) {
				$this->data['config_product_reviews_pros_status'] = $this->request->post['config_product_reviews_pros_status'];
			} elseif (isset($store_info['config_product_reviews_pros_status'])) {
				$this->data['config_product_reviews_pros_status'] = $store_info['config_product_reviews_pros_status'];
			} else {
				$this->data['config_product_reviews_pros_status'] = $this->config->get('config_product_reviews_pros_status');
			}

			if (isset($this->request->post['config_product_reviews_cons_status'])) {
				$this->data['config_product_reviews_cons_status'] = $this->request->post['config_product_reviews_cons_status'];
			} elseif (isset($store_info['config_product_reviews_cons_status'])) {
				$this->data['config_product_reviews_cons_status'] = $store_info['config_product_reviews_cons_status'];
			} else {
				$this->data['config_product_reviews_cons_status'] = $this->config->get('config_product_reviews_cons_status');
			}

			if (isset($this->request->post['config_product_reviews_report_abuse_status'])) {
				$this->data['config_product_reviews_report_abuse_status'] = $this->request->post['config_product_reviews_report_abuse_status']; 
			} elseif (isset($store_info['config_product_reviews_report_abuse_status'])) {
				$this->data['config_product_reviews_report_abuse_status'] = $store_info['config_product_reviews_report_abuse_status'];
			} else {
				$this->data['config_product_reviews_report_abuse_status'] = $this->config->get('config_product_reviews_report_abuse_status');
			}

			if (isset($this->request->post['config_product_reviews_helpfulness_status'])) {
				$this->data['config_product_reviews_helpfulness_status'] = $this->request->post['config_product_reviews_helpfulness_status']; 
			} elseif (isset($store_info['config_product_reviews_helpfulness_status'])) {
				$this->data['config_product_reviews_helpfulness_status'] = $store_info['config_product_reviews_helpfulness_status'];
			} else {
				$this->data['config_product_reviews_helpfulness_status'] = $this->config->get('config_product_reviews_helpfulness_status');
			}

			if (isset($this->request->post['config_product_reviews_total_rating_status'])) {
				$this->data['config_product_reviews_total_rating_status'] = $this->request->post['config_product_reviews_total_rating_status']; 
			} elseif (isset($store_info['config_product_reviews_total_rating_status'])) {
				$this->data['config_product_reviews_total_rating_status'] = $store_info['config_product_reviews_total_rating_status'];
			} else {
				$this->data['config_product_reviews_total_rating_status'] = $this->config->get('config_product_reviews_total_rating_status');
			}

			if (isset($this->request->post['config_product_reviews_helpfulness_guest'])) {
				$this->data['config_product_reviews_helpfulness_guest'] = $this->request->post['config_product_reviews_helpfulness_guest']; 
			} elseif (isset($store_info['config_product_reviews_helpfulness_guest'])) {
				$this->data['config_product_reviews_helpfulness_guest'] = $store_info['config_product_reviews_helpfulness_guest'];
			} else {
				$this->data['config_product_reviews_helpfulness_guest'] = $this->config->get('config_product_reviews_helpfulness_guest');
			}

			if (isset($this->request->post['config_product_reviews_report_abuse_guest'])) {
				$this->data['config_product_reviews_report_abuse_guest'] = $this->request->post['config_product_reviews_report_abuse_guest']; 
			} elseif (isset($store_info['config_product_reviews_report_abuse_guest'])) {
				$this->data['config_product_reviews_report_abuse_guest'] = $store_info['config_product_reviews_report_abuse_guest'];
			} else {
				$this->data['config_product_reviews_report_abuse_guest'] = $this->config->get('config_product_reviews_report_abuse_guest');
			}

			if (isset($this->request->post['config_product_reviews_autoapprove'])) {
				$this->data['config_product_reviews_autoapprove'] = $this->request->post['config_product_reviews_autoapprove']; 
			} elseif (isset($store_info['config_product_reviews_autoapprove'])) {
				$this->data['config_product_reviews_autoapprove'] = $store_info['config_product_reviews_autoapprove'];
			} else {
				$this->data['config_product_reviews_autoapprove'] = $this->config->get('config_product_reviews_autoapprove');
			}

			if (isset($this->request->post['config_product_reviews_autoapprove_rating'])) {
				$this->data['config_product_reviews_autoapprove_rating'] = $this->request->post['config_product_reviews_autoapprove_rating']; 
			} elseif (isset($store_info['config_product_reviews_autoapprove_rating'])) {
				$this->data['config_product_reviews_autoapprove_rating'] = $store_info['config_product_reviews_autoapprove_rating'];
			} else {
				$this->data['config_product_reviews_autoapprove_rating'] = $this->config->get('config_product_reviews_autoapprove_rating');
			}

			$this->data['appearance'] = array('small', 'medium' , 'big');

			if (isset($this->request->post['config_product_reviews_appearance_type'])) {
				$this->data['config_product_reviews_appearance_type'] = $this->request->post['config_product_reviews_appearance_type']; 
			} elseif (isset($store_info['config_product_reviews_appearance_type'])) {
				$this->data['config_product_reviews_appearance_type'] = $store_info['config_product_reviews_appearance_type'];
			} else {
				$this->data['config_product_reviews_appearance_type'] = $this->config->get('config_product_reviews_appearance_type');
			}

			$this->data['appearance_customer'] = array();

			$stars = glob(DIR_IMAGE . 'product_review/stars-*');

			$base = defined('HTTPS_CATALOG') ? HTTPS_CATALOG : HTTP_CATALOG;

			foreach ($stars as $star) {
				preg_match("/\/stars-(.*)-(\d+).png$/i", $star, $name);

				if (isset($name[1]) && $name[sizeof($name) - 1] == '5') {
					$this->data['appearance_customer'][] = array($base . 'image/product_review' . $name[0], $name[sizeof($name) - 2]);
				}
			}

			if (isset($this->request->post['config_product_reviews_appearance_customer_rating'])) {
				$this->data['config_product_reviews_appearance_customer_rating'] = $this->request->post['config_product_reviews_appearance_customer_rating']; 
			} elseif (isset($store_info['config_product_reviews_appearance_customer_rating'])) {
				$this->data['config_product_reviews_appearance_customer_rating'] = $store_info['config_product_reviews_appearance_customer_rating'];
			} else {
				$this->data['config_product_reviews_appearance_customer_rating'] = $this->config->get('config_product_reviews_appearance_customer_rating');
			}

			if (isset($this->request->post['config_product_reviews_sort_status'])) {
				$this->data['config_product_reviews_sort_status'] = $this->request->post['config_product_reviews_sort_status']; 
			} elseif (isset($store_info['config_product_reviews_sort_status'])) {
				$this->data['config_product_reviews_sort_status'] = $store_info['config_product_reviews_sort_status'];
			} else {
				$this->data['config_product_reviews_sort_status'] = $this->config->get('config_product_reviews_sort_status');
			}

			if (isset($this->request->post['config_product_reviews_image_status'])) {
				$this->data['config_product_reviews_image_status'] = $this->request->post['config_product_reviews_image_status']; 
			} elseif (isset($store_info['config_product_reviews_image_status'])) {
				$this->data['config_product_reviews_image_status'] = $store_info['config_product_reviews_image_status'];
			} else {
				$this->data['config_product_reviews_image_status'] = $this->config->get('config_product_reviews_image_status');
			}

			if (isset($this->request->post['config_product_reviews_image_thumb_width'])) {
				$this->data['config_product_reviews_image_thumb_width'] = $this->request->post['config_product_reviews_image_thumb_width']; 
			} elseif (isset($store_info['config_product_reviews_image_thumb_width'])) {
				$this->data['config_product_reviews_image_thumb_width'] = $store_info['config_product_reviews_image_thumb_width'];
			} else {
				$this->data['config_product_reviews_image_thumb_width'] = $this->config->get('config_product_reviews_image_thumb_width');
			}

			if (isset($this->request->post['config_product_reviews_image_thumb_height'])) {
				$this->data['config_product_reviews_image_thumb_height'] = $this->request->post['config_product_reviews_image_thumb_height']; 
			} elseif (isset($store_info['config_product_reviews_image_thumb_height'])) {
				$this->data['config_product_reviews_image_thumb_height'] = $store_info['config_product_reviews_image_thumb_height'];
			} else {
				$this->data['config_product_reviews_image_thumb_height'] = $this->config->get('config_product_reviews_image_thumb_height');
			}

			if (isset($this->request->post['config_product_reviews_image_popup_width'])) {
				$this->data['config_product_reviews_image_popup_width'] = $this->request->post['config_product_reviews_image_popup_width']; 
			} elseif (isset($store_info['config_product_reviews_image_popup_width'])) {
				$this->data['config_product_reviews_image_popup_width'] = $store_info['config_product_reviews_image_popup_width'];
			} else {
				$this->data['config_product_reviews_image_popup_width'] = $this->config->get('config_product_reviews_image_popup_width');
			}

			if (isset($this->request->post['config_product_reviews_image_popup_height'])) {
				$this->data['config_product_reviews_image_popup_height'] = $this->request->post['config_product_reviews_image_popup_height']; 
			} elseif (isset($store_info['config_product_reviews_image_popup_height'])) {
				$this->data['config_product_reviews_image_popup_height'] = $store_info['config_product_reviews_image_popup_height'];
			} else {
				$this->data['config_product_reviews_image_popup_height'] = $this->config->get('config_product_reviews_image_popup_height');
			}

			$this->data['product_ratings'] = range(1, 5);
			]]></add>
		</operation>
	</file>

	<file name="admin/language/*/setting/setting.php,admin/language/*/setting/store.php">
		<operation>
			<search position="before"><![CDATA[?>]]></search>
			<add><![CDATA[
			$_['text_product_reviews']                             = 'Product reviews';
			$_['entry_product_reviews_status']                     = 'Module status:';
			$_['entry_product_reviews_notify_status']              = 'New reviews notification:';
			$_['entry_product_reviews_notify_email']               = 'Send emails to:';
			$_['entry_product_reviews_notification']               = 'Message notification:';
			$_['entry_product_reviews_css']                        = 'Set the CSS:';
			$_['entry_product_reviews_rating_guest']               = 'Guests can\'t rate the products:';
			$_['entry_product_reviews_pros_status']                = 'Show Pros field:';
			$_['entry_product_reviews_cons_status']                = 'Show Cons field:';
			$_['entry_product_reviews_report_abuse_status']        = 'Show Report abuse:';
			$_['entry_product_reviews_helpfulness_status']         = 'Show helpfulness:';
			$_['entry_product_reviews_total_rating_status']        = 'Show average rating of review:';
			$_['entry_product_reviews_report_abuse_guest']         = 'Guests can\'t Report abuse:';
			$_['entry_product_reviews_helpfulness_guest']          = 'Guests can\'t helpfulness:';
			$_['entry_product_reviews_autoapprove']                = 'Auto approve reviews:<br /><span class="help">Only if the client has written a review.</span>';
			$_['entry_product_reviews_autoapprove_rating']         = 'Rating stars:<br /><span class="help">Average rating the product to automatically show reviews (auto approve reviews must be on).<b/></span>';
			$_['entry_product_reviews_appearance_type']            = 'Appearance type:<br /><span class="help">The size of stars to rating.</span>';
			$_['entry_product_reviews_appearance_customer_rating'] = 'Appearance type of customer rating:<br /><span class="help">The appearance of stars to rating of customer.</span>';
			$_['entry_product_reviews_sort_status']                = 'Sort list reviews:';
			$_['entry_product_reviews_image_status']               = 'Adding an image to the review:';
			$_['entry_product_reviews_image_thumb']                = 'Review image thumb size:';
			$_['entry_product_reviews_image_popup']                = 'Review image popup size:';
			]]></add>
		</operation>
	</file>

	<file name="admin/view/template/setting/setting.tpl,admin/view/template/setting/store_form.tpl">
		<operation>
			<search position="after"><![CDATA[<div id="tab-option">]]></search>
			<add><![CDATA[
			<h2><?php echo $text_product_reviews; ?></h2>
			<table class="form">
			<tr>
              <td><?php echo $entry_product_reviews_status; ?></td>
              <td><select name="config_product_reviews_status">
                  <?php if ($config_product_reviews_status) { ?>
                  <option value="1" selected="selected"><?php echo $text_enabled; ?></option>
                  <option value="0"><?php echo $text_disabled; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_enabled; ?></option>
                  <option value="0" selected="selected"><?php echo $text_disabled; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_notify_status; ?></td>
              <td><select name="config_product_reviews_notify_status">
                  <?php if ($config_product_reviews_notify_status) { ?>
                  <option value="1" selected="selected"><?php echo $text_yes; ?></option>
                  <option value="0"><?php echo $text_no; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_yes; ?></option>
                  <option value="0" selected="selected"><?php echo $text_no; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_notify_email; ?></td>
              <td><input type="text" name="config_product_reviews_notify_email" value="<?php echo $config_product_reviews_notify_email; ?>" /></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_notification; ?></td>
              <td><textarea name="config_product_reviews_notification" rows="10" cols="150"><?php echo $config_product_reviews_notification; ?></textarea><div style="padding-top: 7px;"><b>{product}</b> - product name to which added review <b>{avg}</b> - average rating <b>{review}</b> - review added by the user</div></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_css; ?></td>
              <td><div id="css" class="htabs"><a href="#css_form">Form</a><a href="#css_pros_cons_list">Pros and cons list</a><a href="#css_rating_list">Rating list</a><a href="#css_helpfulness">Helpfulness</a><a href="#css_sort">Sort reviews</a><a href="#css_total_rating">Total rating of review</a><a href="#css_image">Image presentation</a><a href="#css_box">Box (latest/random)</a><a href="#css_page">Page with all reviews</a></div>
				<div id="css_form"><textarea name="config_product_reviews_form_css" rows="14" wrap="off" style="width: 99%"><?php echo $config_product_reviews_form_css; ?></textarea></div>
				<div id="css_pros_cons_list"><textarea name="config_product_reviews_list_css" rows="14" wrap="off" style="width: 99%"><?php echo $config_product_reviews_list_css; ?></textarea></div>
				<div id="css_rating_list"><textarea name="config_product_reviews_rating_css" rows="14" wrap="off" style="width: 99%"><?php echo $config_product_reviews_rating_css; ?></textarea></div>
				<div id="css_helpfulness"><textarea name="config_product_reviews_helpfulness_css" rows="14" wrap="off" style="width: 99%"><?php echo $config_product_reviews_helpfulness_css; ?></textarea></div>
                <div id="css_sort"><textarea name="config_product_reviews_sort_css" rows="14" wrap="off" style="width: 99%"><?php echo $config_product_reviews_sort_css; ?></textarea></div>
				<div id="css_total_rating"><textarea name="config_product_reviews_total_rating_css" rows="14" wrap="off" style="width: 99%"><?php echo $config_product_reviews_total_rating_css; ?></textarea></div>
				<div id="css_image"><textarea name="config_product_reviews_image_css" rows="14" wrap="off" style="width: 99%"><?php echo $config_product_reviews_image_css; ?></textarea></div>
			    <div id="css_box"><textarea name="config_product_reviews_box_css" rows="14" wrap="off" style="width: 99%"><?php echo $config_product_reviews_box_css; ?></textarea></div>
				<div id="css_page"><textarea name="config_product_reviews_page_css" rows="14" wrap="off" style="width: 99%"><?php echo $config_product_reviews_page_css; ?></textarea></div>
			  </td>
			</tr>
			<tr>
              <td><?php echo $entry_product_reviews_pros_status; ?></td>
              <td><select name="config_product_reviews_pros_status">
                  <?php if ($config_product_reviews_pros_status) { ?>
                  <option value="1" selected="selected"><?php echo $text_yes; ?></option>
                  <option value="0"><?php echo $text_no; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_yes; ?></option>
                  <option value="0" selected="selected"><?php echo $text_no; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_cons_status; ?></td>
              <td><select name="config_product_reviews_cons_status">
                  <?php if ($config_product_reviews_cons_status) { ?>
                  <option value="1" selected="selected"><?php echo $text_yes; ?></option>
                  <option value="0"><?php echo $text_no; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_yes; ?></option>
                  <option value="0" selected="selected"><?php echo $text_no; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_report_abuse_status; ?></td>
              <td><select name="config_product_reviews_report_abuse_status">
                  <?php if ($config_product_reviews_report_abuse_status) { ?>
                  <option value="1" selected="selected"><?php echo $text_yes; ?></option>
                  <option value="0"><?php echo $text_no; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_yes; ?></option>
                  <option value="0" selected="selected"><?php echo $text_no; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_helpfulness_status; ?></td>
              <td><select name="config_product_reviews_helpfulness_status">
                  <?php if ($config_product_reviews_helpfulness_status) { ?>
                  <option value="1" selected="selected"><?php echo $text_yes; ?></option>
                  <option value="0"><?php echo $text_no; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_yes; ?></option>
                  <option value="0" selected="selected"><?php echo $text_no; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_total_rating_status; ?></td>
              <td><select name="config_product_reviews_total_rating_status">
                  <?php if ($config_product_reviews_total_rating_status) { ?>
                  <option value="1" selected="selected"><?php echo $text_yes; ?></option>
                  <option value="0"><?php echo $text_no; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_yes; ?></option>
                  <option value="0" selected="selected"><?php echo $text_no; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_autoapprove; ?></td>
              <td><select name="config_product_reviews_autoapprove">
                  <?php if ($config_product_reviews_autoapprove) { ?>
                  <option value="1" selected="selected"><?php echo $text_yes; ?></option>
                  <option value="0"><?php echo $text_no; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_yes; ?></option>
                  <option value="0" selected="selected"><?php echo $text_no; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_autoapprove_rating; ?></td>
              <td><select name="config_product_reviews_autoapprove_rating">
				  <?php foreach ($product_ratings as $key => $rating) { ?>
				  <?php if ($config_product_reviews_autoapprove_rating == $rating) { ?>
				  <option value="<?php echo $rating; ?>" selected="selected"><?php echo $rating; ?></option>
				  <?php } else { ?>
				  <option value="<?php echo $rating; ?>"><?php echo $rating; ?></option>
				  <?php } ?>
				  <?php } ?>
				  </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_appearance_type; ?></td>
              <td><select name="config_product_reviews_appearance_type">
				  <?php foreach ($appearance as $key => $type) { ?>
				  <?php if ($config_product_reviews_appearance_type == $type) { ?>
				  <option value="<?php echo $type; ?>" selected="selected"><?php echo $type; ?></option>
				  <?php } else { ?>
				  <option value="<?php echo $type; ?>"><?php echo $type; ?></option>
				  <?php } ?>
				  <?php } ?>
				  </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_appearance_customer_rating; ?></td>
              <td><?php foreach ($appearance_customer as $key => $type) { ?>
				  <?php if (isset($type[1]) && $config_product_reviews_appearance_customer_rating == $type[1]) { ?>
				  <input type="radio" name="config_product_reviews_appearance_customer_rating" value="<?php echo $type[1]; ?>" checked /> <img src="<?php echo $type[0]; ?>" style="vertical-align: middle;" />
				  <?php } else { ?>
				  <input type="radio" name="config_product_reviews_appearance_customer_rating" value="<?php echo $type[1]; ?>"> <img src="<?php echo $type[0]; ?>" style="vertical-align: middle;" />
				  <?php } ?><br />
				  <?php } ?></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_report_abuse_guest; ?></td>
              <td><select name="config_product_reviews_report_abuse_guest">
                  <?php if ($config_product_reviews_report_abuse_guest) { ?>
                  <option value="1" selected="selected"><?php echo $text_enabled; ?></option>
                  <option value="0"><?php echo $text_disabled; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_enabled; ?></option>
                  <option value="0" selected="selected"><?php echo $text_disabled; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_rating_guest; ?></td>
              <td><select name="config_product_reviews_rating_guest">
                  <?php if ($config_product_reviews_rating_guest) { ?>
                  <option value="1" selected="selected"><?php echo $text_enabled; ?></option>
                  <option value="0"><?php echo $text_disabled; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_enabled; ?></option>
                  <option value="0" selected="selected"><?php echo $text_disabled; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_helpfulness_guest; ?></td>
              <td><select name="config_product_reviews_helpfulness_guest">
                  <?php if ($config_product_reviews_helpfulness_guest) { ?>
                  <option value="1" selected="selected"><?php echo $text_enabled; ?></option>
                  <option value="0"><?php echo $text_disabled; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_enabled; ?></option>
                  <option value="0" selected="selected"><?php echo $text_disabled; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_sort_status; ?></td>
              <td><select name="config_product_reviews_sort_status">
                  <?php if ($config_product_reviews_sort_status) { ?>
                  <option value="1" selected="selected"><?php echo $text_enabled; ?></option>
                  <option value="0"><?php echo $text_disabled; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_enabled; ?></option>
                  <option value="0" selected="selected"><?php echo $text_disabled; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_image_status; ?></td>
              <td><select name="config_product_reviews_image_status">
                  <?php if ($config_product_reviews_image_status) { ?>
                  <option value="1" selected="selected"><?php echo $text_enabled; ?></option>
                  <option value="0"><?php echo $text_disabled; ?></option>
                  <?php } else { ?>
                  <option value="1"><?php echo $text_enabled; ?></option>
                  <option value="0" selected="selected"><?php echo $text_disabled; ?></option>
                  <?php } ?>
                </select></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_image_thumb; ?></td>
              <td><input type="text" name="config_product_reviews_image_thumb_width" value="<?php echo $config_product_reviews_image_thumb_width; ?>" size="3" /> x <input type="text" name="config_product_reviews_image_thumb_height" value="<?php echo $config_product_reviews_image_thumb_height; ?>" size="3" /></td>
            </tr>
			<tr>
              <td><?php echo $entry_product_reviews_image_popup; ?></td>
              <td><input type="text" name="config_product_reviews_image_popup_width" value="<?php echo $config_product_reviews_image_popup_width; ?>" size="3" /> x <input type="text" name="config_product_reviews_image_popup_height" value="<?php echo $config_product_reviews_image_popup_height; ?>" size="3" /></td>
            </tr>
			</table>
			<script type="text/javascript"><!--
			$('#css a').tabs();
			//--></script>
			]]></add>
		</operation>
	</file>

	<file name="admin/view/template/common/header.tpl">
		<operation>
			<search position="before"><![CDATA[<li><a href="<?php echo $review; ?>"><?php echo $text_review; ?></a>]]></search>
			<add><![CDATA[
			  <li><a class="parent">Product Reviews</a>
                <ul>
				  <li><a href="<?php echo $product_reviews_review; ?>">Reviews</a></li>
				  <li><a href="<?php echo $product_reviews_rating; ?>">Manage ratings</a></li>
				  <li><a href="<?php echo $product_reviews_report; ?>">Abuse reports</a></li>
				  <li><a href="<?php echo $product_reviews_attribute; ?>">Pros and Cons</a></li>
				  <li><a href="<?php echo $product_reviews_optimize; ?>">Optimize tables</a></li>
				</ul>
			  </li>]]></add>
		</operation>
	</file>

	<file name="admin/controller/common/header.php">
		<operation>
			<search position="before"><![CDATA[$this->data['feed']]]></search>
			<add><![CDATA[
			$this->data['product_reviews_review'] = $this->url->link('product_review/review', 'token=' . $this->session->data['token'], 'SSL');
			$this->data['product_reviews_rating'] = $this->url->link('product_review/rating', 'token=' . $this->session->data['token'], 'SSL');
			$this->data['product_reviews_report'] = $this->url->link('product_review/report', 'token=' . $this->session->data['token'], 'SSL');
			$this->data['product_reviews_attribute'] = $this->url->link('product_review/attribute', 'token=' . $this->session->data['token'], 'SSL');
			$this->data['product_reviews_optimize'] = $this->url->link('product_review/review/optimize', 'token=' . $this->session->data['token'], 'SSL');
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[$this->data['stores'] = array();]]></search>
			<add><![CDATA[
			$query_review = $this->db->query("SHOW TABLES LIKE '" . DB_PREFIX . "pr_rating'");

			if ($query_review->num_rows <= 0) {
				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_attribute` (
  				`attribute_id` int(11) NOT NULL AUTO_INCREMENT,
  				`name` varchar(255) NOT NULL,
  				`type` tinyint(1) NOT NULL,
  				`review_id` int(11) NOT NULL,
  				`status` tinyint(1) NOT NULL,
  				PRIMARY KEY (`attribute_id`),
  				KEY `review_id` (`review_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_rating` (
  				`rating_id` int(11) NOT NULL AUTO_INCREMENT,
  				`sort_order` int(3) NOT NULL DEFAULT '0',
  				`status` tinyint(1) NOT NULL,
  				PRIMARY KEY (`rating_id`),
  				UNIQUE KEY `rating_id` (`rating_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_rating_description` (
 				 `rating_id` int(11) NOT NULL,
 				 `language_id` int(11) NOT NULL,
 				 `name` varchar(64) NOT NULL,
 				 PRIMARY KEY (`rating_id`,`language_id`),
				  KEY `name` (`name`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_rating_review` (
				  `rating_review_id` int(11) NOT NULL AUTO_INCREMENT,
 				 `review_id` int(11) NOT NULL,
 				 `rating_id` int(11) NOT NULL,
 				 `rating` tinyint(1) NOT NULL,
 				 PRIMARY KEY (`rating_review_id`,`rating_id`),
 				 KEY `review_id` (`review_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_rating_to_store` (
				  `rating_id` int(11) NOT NULL,
 				 `store_id` int(11) NOT NULL,
 				 PRIMARY KEY (`rating_id`,`store_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_reason` (
 				 `reason_id` int(11) NOT NULL AUTO_INCREMENT,
 				 `status` tinyint(1) NOT NULL,
 				 PRIMARY KEY (`reason_id`),
				  UNIQUE KEY `reason_id` (`reason_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_reason_description` (
 				 `reason_id` int(11) NOT NULL,
  				`language_id` int(11) NOT NULL,
  				`name` varchar(255) NOT NULL,
 				 PRIMARY KEY (`reason_id`,`language_id`),
  				KEY `name` (`name`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_reason_to_store` (
  				`reason_id` int(11) NOT NULL,
  				`store_id` int(11) NOT NULL,
  				PRIMARY KEY (`reason_id`,`store_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_report` (
  				`report_id` int(11) NOT NULL AUTO_INCREMENT,
  				`title` varchar(255) NOT NULL,
  				`reported` varchar(94) NOT NULL,
  				`review_id` int(11) NOT NULL,
  				`customer_id` int(11) NOT NULL,
  				`store_id` int(11) NOT NULL,
  				`date_added` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  				PRIMARY KEY (`report_id`,`store_id`),
  				UNIQUE KEY `report_id` (`report_id`),
  				KEY `review_id` (`review_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("ALTER TABLE `" . DB_PREFIX . "review` DROP 'vote_yes'");
				$this->db->query("ALTER TABLE `" . DB_PREFIX . "review` DROP 'vote_no'");
				$this->db->query("ALTER TABLE `" . DB_PREFIX . "review` DROP 'image'");

				$this->db->query("ALTER TABLE `" . DB_PREFIX . "review` ADD `vote_yes` INT(9) NOT NULL DEFAULT '0'");
				$this->db->query("ALTER TABLE `" . DB_PREFIX . "review` ADD `vote_no` INT(9) NOT NULL DEFAULT '0'");
				$this->db->query("ALTER TABLE `" . DB_PREFIX . "review` ADD `image` varchar(255) NOT NULL DEFAULT ''");
			}
			
			if (isset($this->request->get['route']) && $this->config->get('config_product_reviews_status')) {
				if (((trim($this->request->get['route']) == 'catalog/review' || substr($this->request->get['route'], 0-strlen('catalog/review')) == 'catalog/review') && !stristr($this->request->get['route'], 'product_review'))) {
					$this->redirect($this->url->link('product_review/review', 'token=' . $this->session->data['token'], 'SSL'));
				}
			}
			]]></add>
		</operation>
	</file>

	<file name="admin/controller/common/home.php">
		<operation>
			<search position="before"><![CDATA[$this->data['heading_title'] = $this->language->get('heading_title');]]></search>
			<add><![CDATA[
			$query_review = $this->db->query("SHOW TABLES LIKE '" . DB_PREFIX . "pr_rating'");

			if ($query_review->num_rows <= 0) {
				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_attribute` (
  				`attribute_id` int(11) NOT NULL AUTO_INCREMENT,
  				`name` varchar(255) NOT NULL,
  				`type` tinyint(1) NOT NULL,
  				`review_id` int(11) NOT NULL,
  				`status` tinyint(1) NOT NULL,
  				PRIMARY KEY (`attribute_id`),
  				KEY `review_id` (`review_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_rating` (
  				`rating_id` int(11) NOT NULL AUTO_INCREMENT,
  				`sort_order` int(3) NOT NULL DEFAULT '0',
  				`status` tinyint(1) NOT NULL,
  				PRIMARY KEY (`rating_id`),
  				UNIQUE KEY `rating_id` (`rating_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_rating_description` (
 				 `rating_id` int(11) NOT NULL,
 				 `language_id` int(11) NOT NULL,
 				 `name` varchar(64) NOT NULL,
 				 PRIMARY KEY (`rating_id`,`language_id`),
				  KEY `name` (`name`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_rating_review` (
				  `rating_review_id` int(11) NOT NULL AUTO_INCREMENT,
 				 `review_id` int(11) NOT NULL,
 				 `rating_id` int(11) NOT NULL,
 				 `rating` tinyint(1) NOT NULL,
 				 PRIMARY KEY (`rating_review_id`,`rating_id`),
 				 KEY `review_id` (`review_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_rating_to_store` (
				  `rating_id` int(11) NOT NULL,
 				 `store_id` int(11) NOT NULL,
 				 PRIMARY KEY (`rating_id`,`store_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_reason` (
 				 `reason_id` int(11) NOT NULL AUTO_INCREMENT,
 				 `status` tinyint(1) NOT NULL,
 				 PRIMARY KEY (`reason_id`),
				  UNIQUE KEY `reason_id` (`reason_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_reason_description` (
 				 `reason_id` int(11) NOT NULL,
  				`language_id` int(11) NOT NULL,
  				`name` varchar(255) NOT NULL,
 				 PRIMARY KEY (`reason_id`,`language_id`),
  				KEY `name` (`name`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_reason_to_store` (
  				`reason_id` int(11) NOT NULL,
  				`store_id` int(11) NOT NULL,
  				PRIMARY KEY (`reason_id`,`store_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "pr_report` (
  				`report_id` int(11) NOT NULL AUTO_INCREMENT,
  				`title` varchar(255) NOT NULL,
  				`reported` varchar(94) NOT NULL,
  				`review_id` int(11) NOT NULL,
  				`customer_id` int(11) NOT NULL,
  				`store_id` int(11) NOT NULL,
  				`date_added` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  				PRIMARY KEY (`report_id`,`store_id`),
  				UNIQUE KEY `report_id` (`report_id`),
  				KEY `review_id` (`review_id`)
				) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;");

				$this->db->query("ALTER TABLE `" . DB_PREFIX . "review` DROP 'vote_yes'");
				$this->db->query("ALTER TABLE `" . DB_PREFIX . "review` DROP 'vote_no'");
				$this->db->query("ALTER TABLE `" . DB_PREFIX . "review` DROP 'image'");

				$this->db->query("ALTER TABLE `" . DB_PREFIX . "review` ADD `vote_yes` INT(9) NOT NULL DEFAULT '0'");
				$this->db->query("ALTER TABLE `" . DB_PREFIX . "review` ADD `vote_no` INT(9) NOT NULL DEFAULT '0'");
				$this->db->query("ALTER TABLE `" . DB_PREFIX . "review` ADD `image` varchar(255) NOT NULL DEFAULT ''");
			}
			]]></add>
		</operation>
	</file>

	<file name="admin/model/catalog/review.php">
		<operation>
			<search position="replace"><![CDATA[SELECT r.review_id]]></search>
			<add><![CDATA[SELECT r.review_id, r.image, r.vote_yes, r.vote_no, (SELECT COUNT(*) AS total FROM " . DB_PREFIX . "pr_attribute a WHERE a.type = '1' AND a.review_id = r.review_id) AS pros, (SELECT COUNT(*) AS total FROM " . DB_PREFIX . "pr_attribute a WHERE a.type = '0' AND a.review_id = r.review_id) AS cons, r.rating AS rating_avg, r.product_id]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA['r.rating',]]></search>
			<add><![CDATA[
			'rating_avg',
			'pros',
			'cons',
			'r.vote_yes',
			'r.vote_no',
			]]></add>
		</operation>

		<operation>
			<search position="after" offset="1"><![CDATA[public function addReview($data) {]]></search>
			<add><![CDATA[
			if ($this->config->get('config_product_reviews_status')) {
				$review_id = $this->db->getLastId();

				$this->db->query("UPDATE " . DB_PREFIX . "review SET image = '" . $data['image'] . "' WHERE review_id = '" . (int)$review_id . "'");

				if (isset($data['product_rating'])) {
					foreach ($data['product_rating'] as $key => $rating) {
						$this->db->query("INSERT INTO " . DB_PREFIX . "pr_rating_review SET review_id = '" . (int)$review_id . "', rating_id = '" . (int)$key . "', rating = '" . (int)$rating . "'");
					}

					$avg = round(array_sum($data['product_rating']) / count($data['product_rating']));

					$this->db->query("UPDATE " . DB_PREFIX . "review SET rating = '" . $avg . "' WHERE review_id = '" . (int)$review_id . "'");
				}

				if (isset($data['pros'])) {
					foreach ($data['pros'] as $pros) {
						$this->db->query("INSERT INTO " . DB_PREFIX . "pr_attribute SET name = '" . $this->db->escape($pros['name']) . "', type = '1', review_id = '" . (int)$review_id . "', status = '1'");
					}
				}

				if (isset($data['cons'])) {
					foreach ($data['cons'] as $cons) {
						$this->db->query("INSERT INTO " . DB_PREFIX . "pr_attribute SET name = '" . $this->db->escape($cons['name']) . "', type = '0', review_id = '" . (int)$review_id . "', status = '1'");
					}
				}
			}
			]]></add>
		</operation>

		<operation>
			<search position="after" offset="1"><![CDATA[public function editReview($review_id, $data) {]]></search>
			<add><![CDATA[
			$this->db->query("UPDATE " . DB_PREFIX . "review SET image = '" . $data['image'] . "' WHERE review_id = '" . (int)$review_id . "'");

			$this->db->query("DELETE FROM " . DB_PREFIX . "pr_rating_review WHERE review_id = '" . (int)$review_id . "'");

			if (isset($data['product_rating'])) {
				foreach ($data['product_rating'] as $key => $rating) {
					$this->db->query("INSERT INTO " . DB_PREFIX . "pr_rating_review SET review_id = '" . (int)$review_id . "', rating_id = '" . (int)$key . "', rating = '" . (int)$rating . "'");
				}

				$avg = round(array_sum($data['product_rating']) / count($data['product_rating']));

				$this->db->query("UPDATE " . DB_PREFIX . "review SET rating = '" . $avg . "' WHERE review_id = '" . (int)$review_id . "'");
			}

			$this->db->query("DELETE FROM " . DB_PREFIX . "pr_attribute WHERE review_id = '" . (int)$review_id . "' AND type = '1'");

			if (isset($data['pros'])) {
				foreach ($data['pros'] as $pros) {
					$this->db->query("INSERT INTO " . DB_PREFIX . "pr_attribute SET name = '" . $this->db->escape($pros['name']) . "', type = '1', review_id = '" . (int)$review_id . "', status = '1'");
				}
			}

			$this->db->query("DELETE FROM " . DB_PREFIX . "pr_attribute WHERE review_id = '" . (int)$review_id . "' AND type = '0'");

			if (isset($data['cons'])) {
				foreach ($data['cons'] as $cons) {
					$this->db->query("INSERT INTO " . DB_PREFIX . "pr_attribute SET name = '" . $this->db->escape($cons['name']) . "', type = '0', review_id = '" . (int)$review_id . "', status = '1'");
				}
			}
			]]></add>
		</operation>
	</file>

	<file name="catalog/language/*/product/product.php">
		<operation>
			<search position="before"><![CDATA[?>]]></search>
			<add><![CDATA[
			$_['error_logged_guest_rate']   = 'You must be logged in to rate this product!';
			$_['error_logged_helpfull']     = 'You must be logged if you want to vote the review is helpfull!';
			$_['error_logged_report_abuse'] = 'You must be logged in to report abuse!';
			$_['error_report_abuse']        = 'Please choose title the report!';
			$_['error_def_report_abuse']    = 'Please give a reason the report!';
			$_['error_helpfull']            = 'The vote was not counted. Please try again later!';
			$_['entry_add_pros']            = 'Add pros';
			$_['entry_add_cons']            = 'Add cons';
			$_['entry_review_image']        = 'Add the image to the presentation:';
			$_['text_pros']                 = 'Pros';
			$_['text_cons']                 = 'Cons';
			$_['text_average_review']       = 'Total:';
			$_['text_report_abuse']         = 'Report abuse';
			$_['text_report_it']            = 'Report it';
			$_['text_other_reason']         = 'Other (write below)';
			$_['text_please_wait']          = 'Please wait!';
			$_['text_helpfull']             = 'Was this review is helpful? <button class="vote_yes" data-vote="1" data-review-id="%s">Yes</button><button class="vote_no" data-vote="0" data-review-id="%s">No</button> %s found this review helpful.';
			$_['text_success_helpfull_yes'] = 'In your opinion is useful. %s found this review helpful.';
			$_['text_success_helpfull_no']  = 'In your opinion is useless. %s found this review helpful.';
			$_['text_report_abuse_success'] = 'Your report has been successfully sent. Thank you.';
			$_['text_sort']                 = 'Sort by:';
			$_['text_default']              = 'Default';
			$_['text_rating_desc']          = 'Rating (highest)';
			$_['text_rating_asc']           = 'Rating (lowest)';
			$_['text_helpfull_desc']        = 'Helpfull (highest)';
			$_['text_helpfull_asc']         = 'Helpfull (lowest)';
			$_['text_date_added_desc']      = 'Date (new)';
			$_['text_date_added_asc']       = 'Date (old)';
			]]></add>
		</operation>
	</file>

	<file name="catalog/controller/product/product.php">
		<operation>
			<search position="before"><![CDATA[public function write() {]]></search>
			<add><![CDATA[
			public function reportabuse() {
				$this->language->load('product/product');

				$this->load->model('catalog/review');

				if (isset($this->request->get['review_id'])) {
					$review_id = (int)$this->request->get['review_id'];
				} else {
					$review_id = 0;
				}

				$review_info = $this->model_catalog_review->getReviewByReviewId($review_id);

				if ($review_info) {
					if ($this->request->server['REQUEST_METHOD'] == 'POST' && $this->config->get('config_product_reviews_report_abuse_status')) {
						$json = array();

						if (!isset($this->request->post['reason_id']) || !preg_match('/^[0-9]+$/i', $this->request->post['reason_id'])) {
							$json['error'] = $this->language->get('error_report_abuse');
						}

						if ((isset($this->request->post['reason_id']) && $this->request->post['reason_id'] == '0') && !preg_match('/\w+/i', $this->request->post['def'])) {
							$json['error'] = $this->language->get('error_def_report_abuse');
						}

						if ($this->config->get('config_product_reviews_report_abuse_guest') && !$this->customer->isLogged()) {
							$json['error'] = $this->language->get('error_logged_report_abuse');
						}

						if (!isset($json['error'])) {
							$this->model_catalog_review->addReportAbuse($review_id, $this->request->post);

							$json['success'] = $this->language->get('text_report_abuse_success');
						}

						$this->response->setOutput(json_encode($json));
					}
				}
			}

			public function vote() {
				$this->language->load('product/product');

				$this->load->model('catalog/review');

				$json = array();

				if ($this->request->server['REQUEST_METHOD'] == 'POST' && $this->config->get('config_product_reviews_helpfulness_status') && (isset($this->request->get['product_id']) && preg_match('/^[0-9]+$/i', $this->request->get['product_id']))) {
					if (!isset($this->request->post['vote']) || !preg_match('/^0|1$/i', $this->request->post['vote'])) {
						$json['error'] = $this->language->get('error_helpfull');
					}

					if (!isset($this->request->post['review_id']) || !preg_match('/^[0-9]+$/i', $this->request->post['review_id'])) {
						$json['error'] = $this->language->get('error_helpfull');
					}

					if ($this->config->get('config_product_reviews_helpfulness_guest') && !$this->customer->isLogged()) {
						$json['error'] = $this->language->get('error_logged_helpfull');
					}

					if (!isset($json['error'])) {
						$this->model_catalog_review->addVoteReview($this->request->get['product_id'], $this->request->post);

						$review_info = $this->model_catalog_review->getReviewByReviewId($this->request->post['review_id']);

						if ($this->request->post['vote'] == '1') {
							$json['success'] = sprintf($this->language->get('text_success_helpfull_yes'), round($review_info['vote_yes'] / ($review_info['vote_yes'] + $review_info['vote_no']) * 100) . '%');
						} else {
							$json['success'] = sprintf($this->language->get('text_success_helpfull_no'), round($review_info['vote_yes'] / ($review_info['vote_yes'] + $review_info['vote_no']) * 100) . '%');
						}
					}
				}

				$this->response->setOutput(json_encode($json));
			}

			public function reviewimageupload() {
				$this->language->load('product/product');

				$json = array();

				if (!empty($this->request->files['file']['name'])) {
					$filename = basename(preg_replace('/[^a-zA-Z0-9\.\-\s+]/', '', html_entity_decode($this->request->files['file']['name'], ENT_QUOTES, 'UTF-8')));

					if ((utf8_strlen($filename) < 3) || (utf8_strlen($filename) > 64)) {
						$json['error'] = $this->language->get('error_filename');
					}

					$allowed = array('jpeg', 'jpg', 'jpe', 'gif', 'png', 'bmp');

					if (!in_array(substr(strrchr($filename, '.'), 1), $allowed)) {
						$json['error'] = $this->language->get('error_filetype');
					}

					$allowed = array('image/jpeg', 'image/gif', 'image/png', 'image/bmp');

					if (!in_array($this->request->files['file']['type'], $allowed)) {
						$json['error'] = $this->language->get('error_filetype');
					}

					if ($this->request->files['file']['error'] != UPLOAD_ERR_OK) {
						$json['error'] = $this->language->get('error_upload_' . $this->request->files['file']['error']);
					}
				} else {
					$json['error'] = $this->language->get('error_upload');
				}

				if (!$json && is_uploaded_file($this->request->files['file']['tmp_name']) && file_exists($this->request->files['file']['tmp_name'])) {
					$file = basename(md5($filename . time())) . basename($filename);

					$json['file'] = $file;

					move_uploaded_file($this->request->files['file']['tmp_name'], DIR_IMAGE . 'product_review/review/' . $file);

					$json['success'] = $this->language->get('text_upload');
				}

				$this->response->setOutput(json_encode($json));
			}
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[if ($product_info['minimum']) {]]></search>
			<add><![CDATA[
			if ($this->config->get('config_product_reviews_status')) {
				$this->document->addScript('catalog/view/javascript/jRating-master/jquery/jRating.jquery.js');
				$this->document->addStyle('catalog/view/javascript/jRating-master/jquery/jRating.jquery.css');

				$this->data['entry_add_pros'] = $this->language->get('entry_add_pros');
				$this->data['entry_add_cons'] = $this->language->get('entry_add_cons');
				$this->data['entry_review_image'] = $this->language->get('entry_review_image');
				$this->data['text_please_wait'] = $this->language->get('text_please_wait');
				$this->data['text_report_abuse'] = $this->language->get('text_report_abuse');
				$this->data['text_other_reason'] = $this->language->get('text_other_reason');
				$this->data['text_sort'] = $this->language->get('text_sort');
				$this->data['error_logged_helpfull'] = $this->language->get('error_logged_helpfull');
				$this->data['error_logged_report_abuse'] = $this->language->get('error_logged_report_abuse');

				$this->data['href_report_abuse'] = $this->url->link('product/product/reportabuse', '', 'SSL');

				$reasons = $this->model_catalog_review->getReasonsTitle();

				if ($reasons) {
					$this->data['reasons'] = $reasons;
				} else {
					$this->data['reasons'] = array();
				}

				$this->data['ratings'] = $this->model_catalog_review->getRatings();

				$this->data['product_review_sorts'] = array();

				$this->data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_default'),
					'value' => 'r.date_added-DESC'
				);

				$this->data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_rating_desc'),
					'value' => 'rating-DESC'
				);

				$this->data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_rating_asc'),
					'value' => 'rating-ASC'
				);

				$this->data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_helpfull_desc'),
					'value' => 'vote-DESC'
				);

				$this->data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_helpfull_asc'),
					'value' => 'vote-ASC'
				);

				$this->data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_date_added_desc'),
					'value' => 'r.date_added-DESC'
				);

				$this->data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_date_added_asc'),
					'value' => 'r.date_added-ASC'
				);
			}
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[if (empty($this->request->post['rating'])) {]]></search>
			<add><![CDATA[
			if ($this->config->get('config_product_reviews_status')) {
				if ($this->config->get('config_product_reviews_rating_guest') && !$this->customer->isLogged()) {
					$json['error'] = $this->language->get('error_logged_guest_rate');

					$this->response->setOutput(json_encode($json));

					return;
				}

				$empty = array_filter($this->request->post['rating']);

				if (empty($this->request->post['rating']) || (count($empty) != count($this->request->post['rating']))) {
					$json['error'] = $this->language->get('error_rating');
				}
			}
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[$this->data['reviews'] = array();]]></search>
			<add><![CDATA[
			if (isset($this->request->get['sort'])) {
				$sort_data = explode('-', $this->request->get['sort']);

				if (isset($sort_data[1]) && preg_match('/asc|desc/i', $sort_data[1])) {
					$sort = $this->request->get['sort'];
				} else {
					$sort = 'r.date_added-DESC';
				}
			} else {
				$sort = 'r.date_added-DESC';
			}

			$this->data['text_pros'] = $this->language->get('text_pros');
			$this->data['text_cons'] = $this->language->get('text_cons');
			$this->data['text_average_review'] = $this->language->get('text_average_review');
			$this->data['text_report_it'] = $this->language->get('text_report_it');

			$this->load->model('tool/image');
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[$this->data['reviews'][] = array(]]></search>
			<add><![CDATA[
			$pros = $this->model_catalog_review->getProsByReviewId($result['review_id']);
			$cons = $this->model_catalog_review->getConsByReviewId($result['review_id']);

			if ($result['vote_yes']) {
				$helpfull = round($result['vote_yes'] / ($result['vote_yes'] + $result['vote_no']) * 100);
			} else {
				$helpfull = '0';
			}

			if ($this->config->get('config_product_reviews_image_status') && $result['review_image']) {
				$thumb = $this->model_tool_image->resize('product_review/review/' . $result['review_image'], $this->config->get('config_product_reviews_image_thumb_width'), $this->config->get('config_product_reviews_image_thumb_height'));
				$popup = $this->model_tool_image->resize('product_review/review/' . $result['review_image'], $this->config->get('config_product_reviews_image_popup_width'), $this->config->get('config_product_reviews_image_popup_height'));
			} else {
				$thumb = '';
				$popup = '';
			}
			]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA[$this->data['reviews'][] = array(]]></search>
			<add><![CDATA[
			'review_id'        => $result['review_id'],
			'product_pros'     => ($pros) ? $pros : array(),
			'product_cons'     => ($cons) ? $cons : array(),
			'ratings'          => $this->model_catalog_review->getRatingsByReviewId($result['review_id']),
			'helpfulness'      => sprintf($this->language->get('text_helpfull'), $result['review_id'], $result['review_id'], $helpfull . '%'),
			]]></add>
		</operation>

		<operation>
			<search position="replace" trim="true"><![CDATA['text'       => $result['text'],]]></search>
			<add><![CDATA[
			'text'       => (($thumb) ? '<a href="' . $popup . '" class="product_review_image_popup"><img src="' . $thumb . '" alt="' . $result['author'] . '" title="' . $result['author'] . '" align="top" /></a> ' : '') . $result['text'],
			]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[$results = $this->model_catalog_review->getReviewsByProductId($this->request->get['product_id'], ($page - 1) * 5, 5);]]></search>
			<add><![CDATA[$results = $this->model_catalog_review->getReviewsByProductId($this->request->get['product_id'], ($page - 1) * 5, 5, $sort);]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[$pagination->url = $this->url->link('product/product/review', 'product_id=' . $this->request->get['product_id'] . '&page={page}');]]></search>
			<add><![CDATA[$pagination->url = $this->url->link('product/product/review', 'product_id=' . $this->request->get['product_id'] . '&page={page}&sort=' . $sort);]]></add>
		</operation>
	</file>

	<!--<file name="catalog/model/catalog/product.php">
		<operation>
			<search position="replace"><![CDATA[(SELECT AVG(rating) AS total FROM " . DB_PREFIX . "review r1 WHERE r1.product_id = p.product_id AND r1.status = '1' GROUP BY r1.product_id)]]></search>
			<add><![CDATA[(SELECT AVG(t.rating) as total FROM " . DB_PREFIX . "review r1 LEFT JOIN " . DB_PREFIX . "pr_rating_review t ON (t.review_id = r1.review_id) WHERE r1.product_id = p.product_id AND r1.status = '1' GROUP BY r1.product_id)]]></add>
		</operation>
	</file>-->

	<file name="catalog/model/catalog/review.php">
		<operation>
			<search position="after" offset="1"><![CDATA[public function addReview($product_id, $data) {]]></search>
			<add><![CDATA[
			if ($this->config->get('config_product_reviews_status')) {
				$review_id = $this->db->getLastId();

				foreach ($data['rating'] as $key => $rating) {
					$this->db->query("INSERT INTO " . DB_PREFIX . "pr_rating_review SET review_id = '" . (int)$review_id . "', rating_id = '" . (int)$key . "', rating = '" . (int)$rating . "'");
				}

				if (isset($data['review_pros'])) {
					foreach ($data['review_pros'] as $pros) {
						$pros = trim($pros);

						if (!empty($pros)) {
							$this->db->query("INSERT INTO " . DB_PREFIX . "pr_attribute SET name = '" . $this->db->escape($pros) . "', type = '1', review_id = '" . (int)$review_id . "', status = '1'");
						}
					}
				}

				if (isset($data['review_cons'])) {
					foreach ($data['review_cons'] as $cons) {
						$cons = trim($cons);

						if (!empty($cons)) {
							$this->db->query("INSERT INTO " . DB_PREFIX . "pr_attribute SET name = '" . $this->db->escape($cons) . "', type = '0', review_id = '" . (int)$review_id . "', status = '1'");
						}
					}
				}

				$avg = round(array_sum($this->request->post['rating']) / count($this->request->post['rating']));

				$this->db->query("UPDATE " . DB_PREFIX . "review SET rating = '" . $avg . "', image = '" . ((isset($data['review_image']) && $data['review_image']) ? $data['review_image'] : '') . "' WHERE review_id = '" . (int)$review_id . "'");

				if ($this->config->get('config_product_reviews_autoapprove') && $this->customer->isLogged()) {
					if ($avg >= $this->config->get('config_product_reviews_autoapprove_rating')) {
						$this->db->query("UPDATE " . DB_PREFIX . "review SET status = '1' WHERE review_id = '" . (int)$review_id . "'");
					}
				}

				if ($this->config->get('config_product_reviews_notify_status') && $this->config->get('config_product_reviews_notify_email') && $this->config->get('config_product_reviews_notification')) {
					$this->load->model('catalog/product');

					$product_info = $this->model_catalog_product->getProduct($product_id);
					$product = '<a href="' . $this->url->link('product/product', 'product_id=' . $product_id) . '">' . $product_info['name'] . '</a>';

					$data['text'] = strip_tags(html_entity_decode($data['text'], ENT_QUOTES, 'UTF-8'));
					$message = str_replace(array('{product}', '{avg}', '{review}'), array($product, $avg, $data['text']), $this->config->get('config_product_reviews_notification'));

					$mail = new Mail();
					$mail->protocol = $this->config->get('config_mail_protocol');
					$mail->parameter = $this->config->get('config_mail_parameter');
					$mail->hostname = $this->config->get('config_smtp_host');
					$mail->username = $this->config->get('config_smtp_username');
					$mail->password = $this->config->get('config_smtp_password');
					$mail->port = $this->config->get('config_smtp_port');
					$mail->timeout = $this->config->get('config_smtp_timeout');				
					$mail->setTo($this->config->get('config_product_reviews_notify_email'));
					$mail->setFrom($this->config->get('config_email'));
					$mail->setSender($this->config->get('config_name'));
					$mail->setSubject('New product review');
					$mail->setHtml($message);
					$mail->send();
				}
			}
			]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA[class ModelCatalogReview extends Model {]]></search>
			<add><![CDATA[
			public function getRatings() {
				$sql = "SELECT r.*, rd.name FROM " . DB_PREFIX . "pr_rating r LEFT JOIN " . DB_PREFIX . "pr_rating_description rd ON (r.rating_id = rd.rating_id) LEFT JOIN " . DB_PREFIX . "pr_rating_to_store r2s ON (r.rating_id = r2s.rating_id) WHERE rd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND r2s.store_id = '" . (int)$this->config->get('config_store_id') . "' AND r.status = '1' GROUP BY r.rating_id ORDER BY r.sort_order ASC";

				$query = $this->db->query($sql);

				return $query->rows;
			}

			public function getProsByReviewId($review_id) {
				$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "pr_attribute WHERE review_id = '" . (int)$review_id . "' AND type = '1' AND status = '1' ORDER BY attribute_id ASC");

				return $query->rows;
			}

			public function getConsByReviewId($review_id) {
				$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "pr_attribute WHERE review_id = '" . (int)$review_id . "' AND type = '0' AND status = '1' ORDER BY attribute_id ASC");

				return $query->rows;
			}

			public function getRatingsByReviewId($review_id) {
				$sql = "SELECT rr.rating_id, rr.rating, rd.name FROM " . DB_PREFIX . "pr_rating_review rr LEFT JOIN " . DB_PREFIX . "pr_rating r ON (rr.rating_id = r.rating_id) LEFT JOIN " . DB_PREFIX . "pr_rating_description rd ON (rr.rating_id = rd.rating_id) WHERE rd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND rr.review_id = '" . (int)$review_id . "' ORDER BY r.sort_order ASC";

				$query = $this->db->query($sql);

				return $query->rows;
			}

			public function getReviewByReviewId($review_id) {
				$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "review WHERE review_id = '" . (int)$review_id . "' AND status = '1'");

				return $query->row;
			}

			public function addVoteReview($product_id, $data = array()) {
				if ($data['vote'] == '1') {
					$this->db->query("UPDATE " . DB_PREFIX . "review SET vote_yes = vote_yes + 1 WHERE product_id = '" . (int)$product_id . "' AND review_id = '" . (int)$data['review_id'] . "'");
				} elseif ($data['vote'] == '0') {
					$this->db->query("UPDATE " . DB_PREFIX . "review SET vote_no = vote_no + 1 WHERE product_id = '" . (int)$product_id . "' AND review_id = '" . (int)$data['review_id'] . "'");
				}
			}

			public function addReportAbuse($review_id, $data = array()) {
				if ($data['reason_id'] > 0) {
					$reason_info = $this->getReasonByReasonId($data['reason_id']);

					$title = $reason_info['name'];
				} else {
					$title = $data['def'];
				}

				if ($this->customer->isLogged()) {
					$customer_id = $this->customer->getId();
					$reported = $this->customer->getFirstName() . ' ' . $this->customer->getLastName();
				} else {
					$customer_id = 0;
					$reported = '';
				}

				$this->db->query("INSERT INTO " . DB_PREFIX . "pr_report SET title = '" . $title . "', reported = '" . $this->db->escape($reported) . "', review_id = '" . (int)$review_id . "', customer_id = '" . (int)$customer_id . "', store_id = '" . (int)$this->config->get('config_store_id') . "', date_added = NOW()");
			}

			public function getReasonsTitle() {
				$query = $this->db->query("SELECT r.reason_id, rd.name FROM " . DB_PREFIX . "pr_reason r LEFT JOIN " . DB_PREFIX . "pr_reason_description rd ON (r.reason_id = rd.reason_id) LEFT JOIN " . DB_PREFIX . "pr_reason_to_store r2s ON (r.reason_id = r2s.reason_id) WHERE rd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND r2s.store_id = '" . (int)$this->config->get('config_store_id') . "' AND r.status = '1'");

				return $query->rows;
			}

			public function getReasonByReasonId($reason_id) {
				$query = $this->db->query("SELECT name FROM " . DB_PREFIX . "pr_reason_description WHERE language_id = '" . (int)$this->config->get('config_language_id') . "' AND reason_id = '" . (int)$reason_id . "'");

				return $query->row;
			}

			public function getAllReviews($data = array()) {
				$sql = "SELECT r.*, p.product_id, pd.name AS product, ROUND((r.vote_yes / (r.vote_no + r.vote_yes)) * 100) as vote FROM " . DB_PREFIX . "review r LEFT JOIN " . DB_PREFIX . "product p ON (r.product_id = p.product_id) LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE r.status = '1' AND p.status = '1' AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "' GROUP BY r.review_id";

				$sort_data = array(
					'r.date_added',
					'rating',
					'vote'
				);

				if (isset($data['sort']) && in_array($data['sort'], $sort_data)) {
					$sql .= " ORDER BY " . $data['sort'];
				} else {
					$sql .= " ORDER BY r.date_added";
				}

				if (isset($data['order']) && ($data['order'] == 'DESC')) {
					$sql .= " DESC";
				} else {
					$sql .= " ASC";
				}

				if (isset($data['start']) || isset($data['limit'])) {
					if ($data['start'] < 0) {
						$data['start'] = 0;
					}

					if ($data['limit'] < 1) {
						$data['limit'] = 20;
					}

					$sql .= " LIMIT " . (int)$data['start'] . "," . (int)$data['limit'];
				}

				$query = $this->db->query($sql);

				return $query->rows;
			}

			public function getTotalAllReviews() {
				$query = $this->db->query("SELECT COUNT(r.review_id) AS total FROM " . DB_PREFIX . "review r LEFT JOIN " . DB_PREFIX . "product p ON (r.product_id = p.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE r.status = '1' AND p.status = '1' AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'");

				if (isset($query->row['total'])) {
					return $query->row['total'];
				} else {
					return 0;
				}
			}
			]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[$query = $this->db->query("SELECT r.review_id, r.author, r.rating]]></search>
			<add><![CDATA[$query = $this->db->query("SELECT r.review_id, r.author, r.image AS review_image, r.vote_yes, r.vote_no, IFNULL((SELECT AVG(t.rating) as total FROM " . DB_PREFIX . "pr_rating_review t WHERE t.review_id = r.review_id), r.rating) as rating, ROUND((r.vote_yes / (r.vote_no + r.vote_yes)) * 100) as vote]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA[public function getReviewsByProductId($product_id, $start = 0, $limit = 20) {]]></search>
			<add><![CDATA[
			$sort = explode("-", $sort);

			$sort_data = array(
				'r.date_added',
				'rating',
				'vote'
			);

			if (isset($sort[1]) && in_array($sort[0], $sort_data)) {
				$sql = " ORDER BY " . $sort[0] . ' ' . $sort[1];
			} else {
				$sql = " ORDER BY r.date_added DESC";
			}
			]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[public function getReviewsByProductId($product_id, $start = 0, $limit = 20) {]]></search>
			<add><![CDATA[public function getReviewsByProductId($product_id, $start = 0, $limit = 20, $sort = 'r.date_added-DESC') {]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[ORDER BY r.date_added DESC LIMIT " . (int)$start . "," . (int)$limit);]]></search>
			<add><![CDATA[" . $sql . " LIMIT " . (int)$start . "," . (int)$limit);]]></add>
		</operation>
	</file>

	<file name="catalog/view/theme/*/template/product/review.tpl">
		<operation>
			<search position="after"><![CDATA[<?php echo $review['text']; ?>]]></search>
			<add><![CDATA[
			<?php if ($this->config->get('config_product_reviews_status')) { ?>
			<?php if ($this->config->get('config_product_reviews_pros_status') || $this->config->get('config_product_reviews_cons_status')) { ?>
			<div style="clear: both;"></div>
			<div class="product_feature">
			  <?php if ($this->config->get('config_product_reviews_pros_status') && $review['product_pros']) { ?>
			  <div>
			    <img src="image/product_review/pros.png" alt="<?php echo $text_pros; ?>" title="<?php echo $text_pros; ?>" /><b class="pros"><?php echo $text_pros; ?></b>
				<ul>
				  <?php foreach ($review['product_pros'] as $pros) { ?>
			      <li><?php echo $pros['name']; ?></li>
				  <?php } ?>
			    </ul>
			  </div>
			  <?php } ?>
			  <?php if ($this->config->get('config_product_reviews_cons_status') && $review['product_cons']) { ?>
			  <div>
			    <img src="image/product_review/cons.png" alt="<?php echo $text_cons; ?> title="<?php echo $text_cons; ?>" /><b class="cons"><?php echo $text_cons; ?></b>
				<ul>
				  <?php foreach ($review['product_cons'] as $cons) { ?>
				  <li><?php echo $cons['name']; ?></li>
				  <?php } ?>
				</ul>
			  </div>
			  <?php } ?>
			</div>
			<?php } ?>

			<div class="product_rating_list">
			  <ul>
			    <?php if ($review['ratings']) { ?>
			    <?php foreach ($review['ratings'] as $rating) { ?>
			    <li><?php echo $rating['name']; ?><img src="image/product_review/stars-<?php echo $this->config->get('config_product_reviews_appearance_customer_rating'); ?>-<?php echo $rating['rating']; ?>.png" alt="<?php echo $rating['rating']; ?>" /></li>
			    <?php } ?>
				<?php if ($this->config->get('config_product_reviews_total_rating_status')) { ?>
				<li class="product_review_total_rating"><?php echo $text_average_review; ?><img src="image/product_review/stars-<?php echo $this->config->get('config_product_reviews_appearance_customer_rating'); ?>-<?php echo $review['rating']; ?>.png" alt="<?php echo $review['rating']; ?>" /></li>
				<?php } ?>
				<?php } else { ?>
				<li><img src="image/product_review/stars-<?php echo $this->config->get('config_product_reviews_appearance_customer_rating'); ?>-<?php echo $review['rating']; ?>.png" alt="<?php echo $review['rating']; ?>" /></li>
				<?php } ?>
			  </ul>
			</div>

			<?php if ($this->config->get('config_product_reviews_helpfulness_status') || $this->config->get('config_product_reviews_report_abuse_status')) { ?>
			<div class="product_review_helpfulness">
			  <?php if ($this->config->get('config_product_reviews_helpfulness_status')) { ?>
			  <span class="product_review_vote"><?php echo $review['helpfulness']; ?></span>
			  <?php } ?>&nbsp;
			  <?php if ($this->config->get('config_product_reviews_report_abuse_status')) { ?>
			  <a id="report_abuse" rel="<?php echo $review['review_id']; ?>"><?php echo $text_report_it; ?></a>
			  <?php } ?>
			</div>
			<?php } ?>
			<?php } ?>
			]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA[<?php if ($reviews) { ?>]]></search>
			<add><![CDATA[
			<?php if ($this->config->get('config_product_reviews_status')) { ?>
			<?php if (preg_match('/shoppica/i', $this->config->get('config_template'))) { ?>
			<style>
			.s_rating_holder { display: none; }
			</style>
			<?php } else { ?>
			<style>
			.rating { display: none; }
			</style>
			<?php } ?>
			<?php } ?>
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[<?php if ($reviews) { ?>]]></search>
			<add><![CDATA[
			<?php if ($this->config->get('config_product_reviews_status')) { ?>
			<?php if ($this->config->get('config_product_reviews_image_status')) { ?>
			<script type="text/javascript"><!--
			if (typeof($.fancybox) == 'function') {
					$('a.product_review_image_popup').fancybox({
						width: <?php echo $this->config->get('config_product_reviews_image_popup_width'); ?>,
						height: <?php echo $this->config->get('config_product_reviews_image_popup_height'); ?>,
						autoDimensions: false
					});
				}

				if (typeof($.colorbox) == 'function') {
					$('a.product_review_image_popup').colorbox({
						width: <?php echo $this->config->get('config_product_reviews_image_popup_width'); ?>,
						height: <?php echo $this->config->get('config_product_reviews_image_popup_height'); ?>
					});
				}

				if (typeof($.prettyPhoto) !== 'undefined') {
					$('a.product_review_image_popup').prettyPhoto({
						theme: 'light_square',
						opacity: 0.5,
						social_tools: "",
						deeplinking: false
					});
			}
			//--></script>
			<?php } ?>
			<?php } ?>
			]]></add>
		</operation>
	</file>

	<file name="catalog/view/theme/*/template/product/product.tpl">
		<operation>
			<search position="before"><![CDATA[id="review"]]></search>
			<add><![CDATA[<?php if ($this->config->get('config_product_reviews_status')) { ?>
			<?php if ($this->config->get('config_product_reviews_sort_status')) { ?>
			<div class="product_review_sort"><b><?php echo $text_sort; ?></b>
				<select onchange="$('#review').fadeOut('slow'); $('#review').load('index.php?route=product/product/review&product_id=<?php echo $product_id; ?>&sort=' + this.value); $('#review').fadeIn('slow');">
					<?php foreach ($product_review_sorts as $sorts) { ?>
					<option value="<?php echo $sorts['value']; ?>"><?php echo $sorts['text']; ?></option>
					<?php } ?>
				</select>
			</div>
			<?php } ?>
			<?php } ?>]]></add>
		</operation>
			
		<operation>
			<search position="before"><![CDATA[<?php echo $footer; ?>]]></search>
			<add><![CDATA[<?php if ($this->config->get('config_product_reviews_status')) {
			echo'<style>' . html_entity_decode($this->config->get('config_product_reviews_form_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($this->config->get('config_product_reviews_list_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($this->config->get('config_product_reviews_rating_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($this->config->get('config_product_reviews_helpfulness_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($this->config->get('config_product_reviews_sort_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($this->config->get('config_product_reviews_total_rating_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($this->config->get('config_product_reviews_image_css'), ENT_QUOTES, 'UTF-8') . '</style>';
			} ?>]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[&rating=' + encodeURIComponent($('input[name=\'rating\']:checked').val() ? $('input[name=\'rating\']:checked').val() : '') + '&]]></search>
			<add><![CDATA[&<?php if ($this->config->get('config_product_reviews_status')) { ?>' + $('input[name^=\'rating\']').serialize() + '&' + $('input[name^=\'review_pros\']').serialize() + '&' + $('input[name^=\'review_cons\']').serialize() + '&review_image=' + $('input[name^=\'review_image\']').val() + '<?php } else { ?>rating=' + encodeURIComponent($('input[name=\'rating\']:checked').val() ? $('input[name=\'rating\']:checked').val() : '') + '<?php } ?>&]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[$('input[name=\'name\']').val('');]]></search>
			<add><![CDATA[
			<?php if ($this->config->get('config_product_reviews_status')) { ?>
			$('input[name^=\'review_pros\']').each(function(index) {
				if (!$(this).is(':last-child')) {
					$(this).remove();
				}
			});

			$('input[name^=\'review_cons\']').each(function(index) {
				if (!$(this).is(':last-child')) {
					$(this).remove();
				}
			});

			$('input[name^=\'rating\']').each(function(index) {
				$(this).val('');
			});
			<?php } ?>
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[<?php echo $footer; ?>]]></search>
			<add><![CDATA[
			  <?php if ($this->config->get('config_product_reviews_status')) { ?>
			  <?php if ($this->config->get('config_product_reviews_report_abuse_status')) { ?>
			  <input type="hidden" name="r_id" value="" />
			  <div id="dialog-report-abuse" title="<?php echo $text_report_abuse; ?>">
			    <p class="validateTips"></p>
				<?php foreach ($reasons as $reason) { ?>
			    <input type="radio" name="reason_id" value="<?php echo $reason['reason_id']; ?>" /> <?php echo $reason['name']; ?><br />
			    <?php } ?>
			    <input type="radio" name="reason_id" value="0" /> <?php echo $text_other_reason; ?><br /><input type="text" name="other" value="" class="ui-widget-content ui-corner-all" style="margin: 3px 0 0 25px;" />
			  </div>
			  <?php } ?>

			  <?php if ($this->config->get('config_product_reviews_image_status')) { ?>
			  <script type="text/javascript" src="catalog/view/javascript/jquery/ajaxupload.js"></script>
			  <?php } ?>
			  <script type="text/javascript"><!--
			  $(document).ready(function(){
			    <?php if ($this->config->get('config_product_reviews_report_abuse_status')) { ?>
				$("a#report_abuse").live('click', function() {
				  <?php if ($this->config->get('config_product_reviews_report_abuse_guest') && !$this->customer->isLogged()) { ?>
				  alert('<?php echo $error_logged_report_abuse; ?>');
				  <?php } else { ?>
				  $('input[name="r_id"]').val($(this).attr("rel"));

				  $("#dialog-report-abuse").dialog("open");
				  <?php } ?>
				});

				 $("#dialog-report-abuse").dialog({
				  autoOpen: false,
				  height: 300,
				  width: 350,
				  modal: true,
				  buttons: {
				    "<?php echo $button_continue; ?>": function() {
					  $.ajax({
					    url: 'index.php?route=product/product/reportabuse&review_id=' + $('input[name="r_id"]').val(),
						type: 'post',
						dataType: 'json',
						data: 'reason_id=' + encodeURIComponent($('input[name=\'reason_id\']:checked').val()) + '&def=' + encodeURIComponent($('input[name=\'other\']').val()),
						beforeSend: function() {
						  $(".validateTips").text("").removeClass("ui-state-highlight ui-state-error ui-state-success");
						},
						complete: function() { },
						success: function(data) {
						  if (data['error']) {
						    $(".validateTips").text(data['error']).addClass("ui-state-highlight ui-state-error").css('padding', '10px');
						  }

						  if (data['success']) {
							$(".validateTips").text(data['success']).addClass("ui-state-highlight ui-state-success").css('padding', '10px');

							$("#dialog-report-abuse").siblings('.ui-dialog-buttonpane').find('button:first').hide();
						  }
						}
					  });
				    },
				    Cancel: function() {
				      $(this).dialog("close");
				    }
				  },
				  close: function() {
					$(".validateTips").text("").removeClass("ui-state-highlight ui-state-error ui-state-success").css('padding', '0px');
					$("#dialog-report-abuse").siblings('.ui-dialog-buttonpane').find('button:first').show();
					$('input[name=\'other\']').val('');
				  }
				});
				<?php } ?>

				$('.rating_star2').jRating({
					smallStarsPath: 'catalog/view/javascript/jRating-master/jquery/icons/small.png',
					mediumStarsPath: 'catalog/view/javascript/jRating-master/jquery/icons/medium.png',
					bigStarsPath: 'catalog/view/javascript/jRating-master/jquery/icons/stars.png',
					step: true,
					type: '<?php echo $this->config->get('config_product_reviews_appearance_type'); ?>',
					length: 5,
					rateMax: 5,
					showRateInfo: false,
					canRateAgain: true,
					nbRates: 7,
					onClick : function(element, rate) {
						$('input[name="rating[' + $(element).attr('data-id') + ']"]').val(rate);
					}
				});

				<?php if ($this->config->get('config_product_reviews_helpfulness_status')) { ?>
				$('.product_review_vote button').live('click', function() {
					<?php if ($this->config->get('config_product_reviews_helpfulness_guest') && !$this->customer->isLogged()) { ?>
					alert('<?php echo $error_logged_helpfull; ?>');
					<?php } else { ?>
					var helpfull_box = $(this).parents('.product_review_helpfulness').find('span:first');
					var helpfull_box_copy = helpfull_box.html();

					$.ajax({
						url: 'index.php?route=product/product/vote&product_id=<?php echo $this->request->get['product_id']?>',
						type: 'post',
						dataType: 'json',
						data: 'vote=' + encodeURIComponent($(this).attr('data-vote')) + '&review_id=' + encodeURIComponent($(this).attr('data-review-id')),
						beforeSend: function() {
							helpfull_box.html('<img src="catalog/view/theme/default/image/loading.gif" alt="" /> <?php echo $text_please_wait; ?>');
						},
						complete: function() { },
						success: function(data) {
							if (data['error']) {
								alert(data['error']);

								helpfull_box.html(helpfull_box_copy);
							}

							if (data['success']) {
								helpfull_box.html(data['success']);
							}
						}
					});
					<?php } ?>
				});
				<?php } ?>
			});

			$('.pros_cons').on('keyup', 'input[name^="review_pros"], input[name^="review_cons"]', function() {
				name = $(this).attr('name').replace('[]', '');

				if (this.value != '') {
					if ($('input[name^="' + name + '"]:last').val() != '') {
						$('input[name^="' + name + '"]:last').after('<input type="text" name="' + name + '[]" />');
					}
				} else {
					if (this.value == '' && $('input[name^="' + name + '"]').length > 1) {
						if (!$(this).is(':last-child')) {
							$(this).remove();
							$('input[name^="' + name + '"]:last').focus();
						}
					}
				}
			});

			<?php if ($this->config->get('config_product_reviews_image_status')) { ?>
			new AjaxUpload('#review_image', {
				action: 'index.php?route=product/product/reviewimageupload',
				name: 'file',
				autoSubmit: true,
				responseType: 'json',
				onSubmit: function(file, extension) {
					$('#review_image').after('<img src="catalog/view/theme/default/image/loading.gif" class="loading" style="padding-left: 5px;" />');
					$('#review_image').attr('disabled', true);
				},
				onComplete: function(file, json) {
					$('#review_image').attr('disabled', false);

					$('.error').remove();

					if (json['success']) {
						alert(json['success']);

						$('input[name=\'review_image\']').attr('value', json['file']);
					}

					if (json['error']) {
						$('#review_image').after('<span class="error">' + json['error'] + '</span>');
					}

					$('.loading').remove();	
				}
			});
			<?php } ?>
			//--></script>
			<?php } ?>
			]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[<span><?php echo $entry_bad]]></search>
			<add><![CDATA[<?php if ($this->config->get('config_product_reviews_status')) {
				if ($ratings) {
					echo'<table class="product_rating">';
					foreach ($ratings as $rating) {
						echo'<tr><td>' . $rating['name'] . '</td><td><input type="hidden" name="rating[' . $rating['rating_id'] . ']" value="" /><div class="rating_star2" data-average="5" data-id="' . $rating['rating_id'] . '"></div></td></tr>';
					}
					echo'</table>';

					if ($this->config->get('config_product_reviews_pros_status') || $this->config->get('config_product_reviews_cons_status')) {
					echo'<table class="pros_cons">';
					echo'<tr>';

					if ($this->config->get('config_product_reviews_pros_status')) {
					echo'<td class="pros">' . $entry_add_pros . '</td>';
					}

					if ($this->config->get('config_product_reviews_cons_status')) {
					echo'<td class="cons">' . $entry_add_cons . '</td>';
					}

					echo'</tr>';
					echo'<tr>';

					if ($this->config->get('config_product_reviews_pros_status')) {
					echo'<td><input type="text" name="review_pros[]" /></td>';
					}

					if ($this->config->get('config_product_reviews_cons_status')) {
					echo'<td><input type="text" name="review_cons[]" /></td>';
					}

					echo'</tr>';
					echo'</table>';
					}

					if ($this->config->get('config_product_reviews_image_status')) {
					echo'<div style="margin-top: 20px;">' . $entry_review_image . ' <span class="left-button-org"><span class="right-button-org"><input type="button" value="' . $button_upload . '" id="review_image" class="button"></span></span><input type="hidden" name="review_image" value="" /></div>';
					}
				}
			} else { ?><span><?php echo $entry_bad]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[entry_good; ?></span>]]></search>
			<add><![CDATA[entry_good; ?></span><?php } ?>]]></add>
		</operation>
	</file>

</modification>